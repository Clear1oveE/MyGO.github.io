<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unity</title>
      <link href="/2023/07/16/unity/"/>
      <url>/2023/07/16/unity/</url>
      
        <content type="html"><![CDATA[<h1 id="unity使用笔记"><a href="#unity使用笔记" class="headerlink" title="unity使用笔记"></a>unity使用笔记</h1>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>easyx</title>
      <link href="/2023/05/17/easyx/"/>
      <url>/2023/05/17/easyx/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言使用easyx图形化编程"><a href="#C语言使用easyx图形化编程" class="headerlink" title="C语言使用easyx图形化编程"></a>C语言使用easyx图形化编程</h1><ul><li>首先，使用easyx进行操作必须是<strong>cpp</strong>文件，<strong>切记</strong>。</li><li>头文件–<strong>&lt;graphics.j&gt;</strong></li></ul><h2 id="创建-x2F-关闭一个窗口"><a href="#创建-x2F-关闭一个窗口" class="headerlink" title="创建&#x2F;关闭一个窗口"></a>创建&#x2F;关闭一个窗口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="number">640</span>,<span class="number">480</span>，flag);<span class="comment">//创建一个640*480的窗口</span></span><br><span class="line">getchar（）<span class="comment">//在关闭窗口加上，防止闪退</span></span><br><span class="line">closegraph();<span class="comment">//关闭窗口</span></span><br></pre></td></tr></table></figure><p>flag有以下几种功能：</p><ul><li><p>SHOWCONSOLE 显示控制台窗口</p></li><li><p>NOCLOSE 不支持图形化界面关闭</p></li><li><p>NOMINIMIZE 不支持最小化</p></li><li><p>EW_DBLCLKS 支持双击操作</p><h3 id="当想要实现多个功能时如下操作："><a href="#当想要实现多个功能时如下操作：" class="headerlink" title="当想要实现多个功能时如下操作："></a>当想要实现多个功能时如下操作：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="number">640</span>, <span class="number">480</span>, EW_DBLCLKS | SHOWCONSOLE | NOCLOSE | NOMINIMIZE);</span><br></pre></td></tr></table></figure></li></ul><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="图形样式"><a href="#图形样式" class="headerlink" title="图形样式"></a>图形样式</h3><p>填充样式有三类（以画圆为例）：</p><ul><li>circle（）&#x2F;&#x2F;无填充</li><li>fillcircle（）&#x2F;&#x2F;有边框填充</li><li>solidcircle（）&#x2F;&#x2F;无边框填充</li></ul><p>以形状区分，常见的有八种：</p><ul><li><p>circle 画圆  </p></li><li><p>ellipse 画椭圆</p></li><li><p>pie 画扇形</p></li><li><p>polygon 画多边形</p></li><li><p>rectangle 画矩形</p></li><li><p>roundrect 画圆角矩形</p></li><li><p>line 画线</p></li><li><p>putpixle 画点</p></li></ul><h3 id="设置图形颜色"><a href="#设置图形颜色" class="headerlink" title="设置图形颜色"></a>设置图形颜色</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setfillcolor(颜色);<span class="comment">//设置填充颜色</span></span><br><span class="line">setlinecolor(颜色);<span class="comment">//设置线条颜色</span></span><br><span class="line">setlinestyle(线样式，线宽度);<span class="comment">//设置线条样式</span></span><br></pre></td></tr></table></figure><p>线样式有如下几种：</p><ul><li>PS_SOLID &#x2F;&#x2F;实线</li><li>PS_DASH&#x2F;&#x2F;虚线</li><li>PS_DOT&#x2F;&#x2F;······</li><li>PS_DASHDOT&#x2F;&#x2F;—·—·</li><li>PS_DASHDOTDOT&#x2F;&#x2F;—··—··</li></ul><h3 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setckcolor(颜色)<span class="comment">//设置背景板颜色</span></span><br><span class="line">cleardevice();<span class="comment">//清屏</span></span><br><span class="line"><span class="comment">//一定是两步，第一步相当于把背景颜色垫到当前背景颜色下，第二步擦掉最上层颜色，即剩下的就是设置的背景颜色（默认背景板是黑色）</span></span><br></pre></td></tr></table></figure><h2 id="文字绘制函数"><a href="#文字绘制函数" class="headerlink" title="文字绘制函数"></a>文字绘制函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">settextcolor(颜色)；</span><br><span class="line">outtextxy(<span class="number">50</span>,<span class="number">50</span>,<span class="string">&#x27;a&#x27;</span>);<span class="comment">//在（x,y）输出a</span></span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">50</span>, <span class="string">&quot;lucky!!!&quot;</span>);<span class="comment">//注意单双引号</span></span><br><span class="line">settextstyle(<span class="number">20</span>,<span class="number">0</span>,<span class="string">&quot;楷体&quot;</span>);<span class="comment">//指定高度，字符的平均宽度，如果是0则比例自适应，字体名称</span></span><br><span class="line">setbkmode(TRANSPARENT);<span class="comment">//设置背景样式,透明</span></span><br><span class="line">settextcolor(RGB(<span class="number">255</span>, <span class="number">102</span>, <span class="number">153</span>));<span class="comment">//获取色号方法：ctrl+alt+k截图，c保存色号，ctrl+v</span></span><br></pre></td></tr></table></figure><h3 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fillrectangle(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="type">int</span> width=<span class="number">100</span>/<span class="number">2</span>-textwidth(arr)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> hight = <span class="number">100</span> / <span class="number">2</span> - textheight(arr) / <span class="number">2</span>;</span><br><span class="line">outtextxy(width + <span class="number">200</span>, hight + <span class="number">200</span>, arr);</span><br></pre></td></tr></table></figure><p>​        一个简单的算法，用文字框的一半减去字符串的一半即可得到他们之间的距离，用文字框开始的坐标加上这个距离就可使文字居中</p><h2 id="图像处理函数"><a href="#图像处理函数" class="headerlink" title="图像处理函数"></a>图像处理函数</h2><p>​       使用图像前，需要定义一个变量，使用easyx库提供给我们的类型：IMAGE 如：IMAGE img；当然也可以使用数组，存储多张图片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMAGE img[<span class="number">1</span>];</span><br><span class="line">loadimage(&amp;img[<span class="number">0</span>],<span class="string">&quot;3.png&quot;</span>,<span class="number">640</span>,<span class="number">480</span>);<span class="comment">//从文件中读取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;img[<span class="number">0</span>]);<span class="comment">//在（x，y）位置绘制指定图像</span></span><br></pre></td></tr></table></figure><h2 id="鼠标处理函数"><a href="#鼠标处理函数" class="headerlink" title="鼠标处理函数"></a>鼠标处理函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Click</span><span class="params">()</span> &#123;</span><br><span class="line">ExMessage msg;<span class="comment">//跟图像处理一样，先定义一个变量，mag是一个结构体，里面储存了多种信息</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (peekmessage(&amp;msg, EX_MOUSE)) &#123;<span class="comment">//检测是否有鼠标点击</span></span><br><span class="line"><span class="keyword">switch</span> (msg.message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:<span class="comment">//左键点击</span></span><br><span class="line"><span class="keyword">if</span> (msg.x &gt;= <span class="number">100</span> &amp;&amp; msg.x &lt;= <span class="number">300</span> &amp;&amp; msg.y &gt;= <span class="number">100</span> &amp;&amp; msg.y &lt;= <span class="number">300</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:<span class="comment">//右键点击</span></span><br><span class="line"><span class="keyword">if</span> (msg.x &gt;= <span class="number">100</span> &amp;&amp; msg.x &lt;= <span class="number">300</span> &amp;&amp; msg.y &gt;= <span class="number">100</span> &amp;&amp; msg.y &lt;= <span class="number">300</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yeah&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="窗口处理函数"><a href="#窗口处理函数" class="headerlink" title="窗口处理函数"></a>窗口处理函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Change</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line">SetWindowText(hnd, <span class="string">&quot;蕾姆天下第一&quot;</span>);<span class="comment">//修改窗口标题</span></span><br><span class="line"><span class="type">int</span> isok=MessageBox(hnd, <span class="string">&quot;恭喜你，成功中奖500W&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);<span class="comment">//弹出对话框，hnd是强制置顶的功能，换成NULL则取消这个功能</span></span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)<span class="comment">//判断玩家点击对话框</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;天下没有免费的午餐！&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;500W都不要，脑子没事吧？&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>biji</title>
      <link href="/2023/05/15/biji/"/>
      <url>/2023/05/15/biji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#学习中</title>
      <link href="/2023/05/14/C-%E5%AD%A6%E4%B9%A0%E4%B8%AD/"/>
      <url>/2023/05/14/C-%E5%AD%A6%E4%B9%A0%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h2 id="C-的两个模板"><a href="#C-的两个模板" class="headerlink" title="C#的两个模板"></a>C#的两个模板</h2><p>​      Main（）是C#应用程序的主入口点，执行程序时，无论是<strong>控制台应用程序</strong>还是<strong>Windows窗体应用程序</strong>都从Main（）主程序开始。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加入程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通常来说按下F5键，控制台窗口会立即关闭。为了让程序执行的结果画面暂停，在主程序Main（）末尾加上如下语句：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     Console.WriteLine(<span class="string">&quot;我的第一个C#程序&quot;</span>);</span><br><span class="line">     Console.ReadLine();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Windows-窗体应用程序"><a href="#Windows-窗体应用程序" class="headerlink" title="Windows 窗体应用程序"></a>Windows 窗体应用程序</h3><p>​     添加第二个项目。依次选择菜单选项**”文件-&gt;添加-&gt;新建项目”**，添加Windows窗体应用模板；</p><p>​     在窗体上加入控件。在<strong>工具箱</strong>中展开<strong>公共控件</strong>；将<strong>Label</strong>和<strong>Button</strong>控件添加到窗体中</p><p>​     选择控件，将“属性”窗口的<strong>Font</strong>展开，可以改变字体；<strong>Text</strong>可以改变控件的命名</p><p>​     鼠标双击<strong>Button</strong>控件，进入其事件处理程序并编写程序代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            label1.Text = <span class="string">&quot;Visual C#应用程序&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="设计语言结构"><a href="#设计语言结构" class="headerlink" title="设计语言结构"></a>设计语言结构</h2><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><p>读取有三种方法：</p><ul><li>Console.Read();&#x2F;&#x2F;从标准数据流读取<strong>下一个字符</strong></li><li>Console.ReadLine();&#x2F;&#x2F;读取用户输入的<strong>一连串字符</strong>，可以通过变量储存该字符串</li><li>Console.ReadKey()&#x2F;&#x2F;获取用户按下的<strong>下一个字符或功能键</strong></li></ul><h4 id="用ReadLine读取数据"><a href="#用ReadLine读取数据" class="headerlink" title="用ReadLine读取数据"></a>用ReadLine读取数据</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Console.Write(<span class="string">&quot;请输入你的名字：&quot;</span>);</span><br><span class="line">           <span class="built_in">string</span> name = Console.ReadLine();</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;Good day!&#123;0&#125;&quot;</span>, name);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>​        值得一提的是，在 C# 中，您可以使用字符数组来表示字符串，但是，更常见的做法是使用 <strong>string</strong> 关键字来声明一个字符串变量。string 关键字是 <strong>System.String</strong> 类的别名。</p><p>下面是string与字符数组的一些区别：</p><ul><li>string可以包含任意数量的字符，但一旦存入，字符串是不可变的，这意味着一旦创建，就不能对其进行更改。如果需要更改字符串，需要创建一个新的字符串对象。</li><li>与字符串不同，字符数组是可变的，并且可以直接更改。</li></ul><p>下面是一个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> myString = <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 创建一个字符串对象</span></span><br><span class="line"><span class="built_in">char</span> myChar = <span class="string">&#x27;H&#x27;</span>; <span class="comment">// 创建一个字符变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问字符串中的单个字符</span></span><br><span class="line"><span class="built_in">char</span> firstChar = myString[<span class="number">0</span>]; <span class="comment">// 获取字符串的第一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作字符串</span></span><br><span class="line"><span class="built_in">string</span> newString = myString.Replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;C#&quot;</span>); <span class="comment">// 替换字符串中的部分内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储多个字符</span></span><br><span class="line"><span class="built_in">char</span>[] letters = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span> &#125;; <span class="comment">// 创建一个字符数组</span></span><br><span class="line"><span class="built_in">char</span> firstLetter = letters[<span class="number">0</span>]; <span class="comment">// 获取字符数组的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改字符</span></span><br><span class="line">letters[<span class="number">0</span>] = <span class="string">&#x27;e&#x27;</span>; <span class="comment">// 更改字符数组的第一个元素</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表相加</title>
      <link href="/2023/05/14/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/"/>
      <url>/2023/05/14/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="链表相加"><a href="#链表相加" class="headerlink" title="链表相加"></a>链表相加</h1><blockquote><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], l2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>]</span><br><span class="line">解释：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>关键在于t的运用，t能用于进位和结束的判断，神来之笔！</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">cur</span> =</span> dummy;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1 || l2 || t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1) t += l1-&gt;val,l1=l1-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(l2) t += l2-&gt;val,l2=l2-&gt;next;</span><br><span class="line">        cur-&gt;next = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        cur-&gt;next-&gt;val = t%<span class="number">10</span>;</span><br><span class="line">        cur-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希排序</title>
      <link href="/2023/05/14/%E5%93%88%E5%B8%8C%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/05/14/%E5%93%88%E5%B8%8C%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希排序"><a href="#哈希排序" class="headerlink" title="哈希排序"></a>哈希排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到数组中的最大值</span></span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建哈希表并初始化为0</span></span><br><span class="line">    <span class="type">int</span>* hashTable = (<span class="type">int</span>*)<span class="built_in">calloc</span>(max + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个元素的出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        hashTable[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据哈希表进行排序</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; hashTable[i]; j++) &#123;</span><br><span class="line">            arr[index++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放哈希表的内存</span></span><br><span class="line">    <span class="built_in">free</span>(hashTable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    countingSort(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sorted array: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>求最小公倍数/最大公因数</title>
      <link href="/2023/01/04/%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/"/>
      <url>/2023/01/04/%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="求最小公倍数-x2F-最大公因数"><a href="#求最小公倍数-x2F-最大公因数" class="headerlink" title="求最小公倍数&#x2F;最大公因数"></a>求最小公倍数&#x2F;最大公因数</h1><h2 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h2><p>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：</p><p>1997 &#x2F; 615 &#x3D; 3 (余 152)</p><p>615 &#x2F; 152 &#x3D; 4(余7)</p><p>152 &#x2F; 7 &#x3D; 21(余5)</p><p>7 &#x2F; 5 &#x3D; 1 (余2)</p><p>5 &#x2F; 2 &#x3D; 2 (余1)</p><p>2 &#x2F; 1 &#x3D; 2 (余0)</p><p>至此，最大公约数为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1,num2,tem;<span class="comment">//num1，num2是输入的两个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line">    <span class="keyword">while</span>(num2)&#123;</span><br><span class="line">        tem=num1;</span><br><span class="line">        num1=num2;</span><br><span class="line">        num2=tem%num2;</span><br><span class="line">    &#125;<span class="comment">//当num2=0时，num1就是最大公约数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>最小公倍数就是两数相乘再除以最小公倍数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findmax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1,num2,max,min;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line">    max=findmax(num1,num2);<span class="comment">//最大公约数</span></span><br><span class="line">    min=num1*num2/max;<span class="comment">//最小公倍数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,min)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findmax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tem;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        tem=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=tem%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="comment">//找最大公约数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>换进制的一些算法</title>
      <link href="/2022/11/23/c%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/11/23/c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">convert</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (n%<span class="number">10</span>)+convert(n/<span class="number">10</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">numConvert</span><span class="params">(<span class="type">int</span> number, <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N=n,ten=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(number!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        ten=ten+(number%<span class="number">10</span>)*(N/n);</span><br><span class="line">        N=n*N;</span><br><span class="line">        number=number/<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> three=<span class="number">0</span>,x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ten!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        three=three+(ten%m)*x;</span><br><span class="line">        x*=<span class="number">10</span>;</span><br><span class="line">        ten=ten/m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> three;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十年一舞，终有回响</title>
      <link href="/2022/11/20/postDeft/"/>
      <url>/2022/11/20/postDeft/</url>
      
        <content type="html"><![CDATA[<h1 id="十年一舞，终有回响"><a href="#十年一舞，终有回响" class="headerlink" title="十年一舞，终有回响"></a>十年一舞，终有回响</h1><h5 id="12班2022211344谢承龙"><a href="#12班2022211344谢承龙" class="headerlink" title="12班2022211344谢承龙"></a>12班2022211344谢承龙</h5><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694528286.jpg" alt="deft"></p><blockquote><p>我个人是从2016年开始接触lol的，当时从客户端页面里第一次看到了lol的职业比赛就被深深吸引住了，后来随着比赛越看越多我也越来越了解每个选手，喜欢上了Clearlove这名选手，也喜欢上了他所在的战队，当时在国内难逢敌手的edg战队，也是从那时第一次认识到了当时edg的顶级“大腿”——deft。后来edg浮浮沉沉，成绩起伏不定，当时edg的选手很多都退役了，deft也离开了edg在这7年时间内辗转数队，因为年龄的增加，状态也不可避免的下滑。今年是他地六次进入s赛，以不被所有人看好的韩国四号种子的身份。他却在自己职业生涯的第十年，打破所有外界的质疑，从入围赛一步步打到决赛，诠释了何为极致的纯粹，以及数十年如一日的对一个目标的不懈追寻所迸发的绚丽火花，在职业生涯的末端为全世界献上了他的名为奇迹的last dance，是我心中很是悸动，久违的感受到了属于电子竞技的魅力，无关国籍，无关立场，单纯地想为这位伟大的选手写一篇博客。 </p></blockquote><p>​    金赫奎（游戏ID：Deft），1996年10月23日出生于韩国<a href="https://baike.baidu.com/item/%E9%A6%96%E5%B0%94/61723?fromModule=lemma_inlink">首尔</a>，韩国<a href="https://baike.baidu.com/item/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/4615671?fromModule=lemma_inlink">英雄联盟</a>职业选手，司职<a href="https://baike.baidu.com/item/ADC/3081935?fromModule=lemma_inlink">ADC</a>，曾效力于SSB战队、<a href="https://baike.baidu.com/item/EDG/15092333?fromModule=lemma_inlink">EDG</a>战队、<a href="https://baike.baidu.com/item/KT/18716422?fromModule=lemma_inlink">KT</a>战队、KZ战队、HLE战队，现效力于<a href="https://baike.baidu.com/item/DRX/50250966?fromModule=lemma_inlink">DRX</a>战队。</p><p>​    <strong>deft</strong>2013年初次登上职业赛场的舞台，效力于<strong>MVP</strong>战队（后被三星收购），三星当时拥有两支战队，两只都是世界顶尖的水平，故这十人也被人们冠以<strong>三星十子</strong>的美称，而deft就是这十人中年级第二小的弟弟。那年deft效力的<strong>三星蓝</strong>在各种赛事上都赢过了<strong>三星白</strong>却在全球总决赛的4强赛中以0：3负于三星白。虽然结局令人惋惜，但deft年纪还小未来可期，<strong>这本应该是deft这位顶级ad谱写传奇的第一步，却不曾想这却成为deft在未来近十年内在世界赛内取得的最好的成绩</strong></p><p>​    在2014年deft远渡重洋来到中国的edg并助力edg成为当时中国独一档的顶尖强队，拿下了包括德玛西亚杯，2015lpl春季赛冠军，并在那年的拳头第一次举办的msi——这一世界上含金量仅次于s赛的世界大赛中战胜了当时被奉为神话的SKT战队，成为了第一届msi冠军，也为中国拿到了第一个国际赛事的冠军，<strong>但令人惋惜的是在deft巅峰期，这届msi成为了他在国际联赛中的唯一高光</strong></p><p>​    在2015年及2016年deft都作为edg的王牌承载着几乎全中国观众的希望登上s赛的舞台但最终都饮恨倒在了8强，而他也最终做出了离开edg的决定，在2016年的年度颁奖典礼上deft也成为了那一年的年度mvp，在中国观众的一声声deft的呐喊与欢呼中，<strong>他留下了离别的泪水，是感激也是不舍，是对中国观众支持的感动，也代表着他的成长，从曾经三星十子中爱哭的弟弟到坚强的逐梦人的成长。</strong></p><p>​    但命运似乎永远都在与deft的开玩笑，处于巅峰末期的deft加入了韩国的“银河战舰”kt，却没能进入2017的世界赛，在2018年deft继续保持在最高水平的竞技水平，帮助kt取得韩国夏季赛冠军，成为了当时最被看好的s赛冠军的有力竞争者。但造化弄人，他们在8强赛中遇上了当年的世界冠军ig，再次倒在了八强，<strong>在deft职业生涯巅峰的末端他仍然没有突破8强这一瓶颈，命运似乎永远都没有站在他这一边。</strong></p><p>   于是在2019年他再次转会kz，在这一年他甚至没能进入季后赛。19年是个对于deft特别却又残忍的一年，在这一年中他取得了他人生中最差的成绩，而曾经的三星十子除他以外全部退役，他的竞技状态也随着年纪的增长开始走向低谷，<strong>他已从队伍中最小的弟弟不知不觉的成为了队内的老大哥，成为了三星十子中最后的明星。</strong></p><p>   在2020，2021年中deft分别效力于drx，hle战队，但无论他如何辗转，队友如何变幻，不变的却是8强这一看似他永远都无法突破的心魔。在他职业生涯的第九年，以五次s赛8强的成绩，他也被人们戏称为“五八同城”。而在2022年deft回到了老东家drx，而这一年他的队友是blg的弃子kingen与zeka，dk的弃子beryl，和才取得联赛倒数成绩的pyosik，所有人都不看好这一支队伍，也一致认为这将是deft生涯的最后一年，随着新生代选手的脱颖而出，人们逐渐开始不在关注这位老将，更不会对他抱有太大期望，<strong>但永远不要低估一位坚守赛场数十年如一日的老将取胜的决心，与一位最纯粹的追梦人历尽坎坷后所拥有的坚定信念</strong></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/007GrnJqgy1h7g9ov4k3sj30u02gkh1q.jpg"></p><p>drx在国内正如赛前无数人所预期的一样，成绩平平，甚至以3:2的成绩艰难击败slb后才堪堪以四号种子的身份进入世界赛。但命运似乎在deft辗转10年后依然没有对他露出笑容，这支drx从入围赛开始就恶战不断，从msi冠军rng到夺冠热门tes，再到8强赛的2021年世界冠军edg，再到lck春季赛冠军，两届世界冠军geng，每场比赛都没人看好drx，但drx却把把“爆冷”在与一众强敌的对决中不断进化，<strong>在击败edg后，这也是deft历经2942天重新突破八强，这一次deft的眼泪名为坚持与热爱。</strong></p><p><strong>”究竟什么样的结局才配得上这一路上的颠沛流离“</strong>在解说为这位老将真心呐喊的声音中，deft终于第一次来到了他人生中梦寐以求的s赛的决赛舞台，而迎战他们的是在这届s赛中以碾压之姿进入决赛，英雄联盟历史上最传奇的战队——SKT。而即使他千辛万苦用尽十年时光才到达这个舞台，命运女神似乎仍然在与他开玩笑，渴望将他拉入深渊。在比赛中drx三次被抢大龙，有两次甚至是被ad抢的，一次次丢失大龙不断挑战着选手们的心态，就连我当时也觉得运气似乎真的不站在drx这边，deft真要止步于此了。<strong>但正如s12主题曲《逐星》所唱到的那样“生命若不息，前行永不停，逐星至天明。”</strong>在重压下deft甘愿做为队伍的绿叶默默抗压，把舞台给到了自己的后辈们，而他们也没有辜负deft这一老大哥的信任，在队伍一次次陷入绝境时交替挺身而出。随着最后一条远古龙被打野稳稳拿下，<strong>deft终于拿到了他追逐十年梦寐以求的全球冠军，创造了s赛近12年以来最触动人心的奇迹</strong>，<strong>那一刻DRX给我带来的感动是超越了“输赢”“胜负”，来到另一个层面。他们夺冠的过程，展现了电子竞技与其他体育项目共同蕴含着的竞技精神，是在逆境中不屈不挠，绝望时拼搏出一线生机，最终实现超越自我，散发着闪耀光芒的人性光辉。这就是竞技体育的魅力，这就是奥林匹克精神。谢谢deft圆满的结局没有让纯粹的理想主义成为悲歌，他的名字必将被所有召唤师铭记。</strong></p><blockquote><p>夺冠后Deft的新ins：</p></blockquote><blockquote><p>过了一段时间了，我终于感受到这一切不是梦。我每一天都看着很多人说：“你拿不到冠军” ，“伤病以后就结束了”，“年纪大了就结束了..”我好像花了10年的时间，才有资格去说你们这些话是错的。希望我和我们队的胜利能成为那些正在经历比我更艰难日子的人们希望，最重要的是不屈服的心…今年真的很有趣，大家给予了我很多支持，这一年是我人生中最幸福的一年，一直以来很感谢大家.</p></blockquote><p><strong>就像deft所说的那样“My dance is not over yet。”</strong>deft的最后一舞已经完美落幕了，但这样一位如此纯粹历经无数坎坷仍初心如故的追梦人向我向，全世界展示了坚持所创造的奇迹，特别在如今的时代里deft的夺冠更是有着无可估量的正面作用。<strong>在摆烂之风畅行的现在，越来越多的人开始学会接受现实，接受不是所有努力都有回报，但当deft这样的老将，drx这样没有太多话题的战队用以比热血漫画还艰难的过程和更圆满的结局告诉世人纯粹才是电竞的未来时，我们或许会想起当年爱上lol的原因，回想起当年挑战命运的自己。</strong>也许很多年后的某一天当我们再一次谈论起deft时，除了赞叹他的十年逐梦，终有回响外，更会钦佩他连续十年倒下，又连续十年站起来的勇气与执着，哪怕是遍体鳞伤，哪怕是不被全世界看好，连命运都无法将他击倒的人，真的很酷。<strong>如果有一天你觉得命运不公，希望你能回来再听听deft与drx的故事，不是所有人都是天选，但你永远是唯一。</strong></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694542656.png" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694545485.jpg" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694548357.jpg" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694551086.jpg" alt="deft"></p>]]></content>
      
      
      <categories>
          
          <category> league of legends </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
