<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法</title>
      <link href="/2023/09/17/%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/17/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="多种排序"><a href="#多种排序" class="headerlink" title="多种排序"></a>多种排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>  将最左边的数设为基准数，分别从右边往左寻找比基准数小的数，从左往右寻找比基准数大的数，并交换位置，直到两数相遇，相遇位置与基准数互换，以此类推</p><ul><li>终止条件：left&gt;right</li><li>当left！&#x3D;right时一直循环</li><li>设置两个数从右往左找和从左往右找，先从右往左</li><li>找到时如果没有相遇，则交换位置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QuickSweep</span><span class="params">(<span class="type">int</span>* ary,<span class="type">int</span> left,<span class="type">int</span> right)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">QuickSweep(<span class="built_in">array</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSweep</span><span class="params">(<span class="type">int</span>* ary, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> temp = ary[left];</span><br><span class="line"><span class="type">int</span> moveR = right;</span><br><span class="line"><span class="type">int</span> moveL = left;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="keyword">while</span> (moveR != moveL) &#123;</span><br><span class="line"><span class="keyword">while</span> (ary[moveR] &gt;= temp &amp;&amp; moveR &gt; moveL)</span><br><span class="line">moveR--;</span><br><span class="line"><span class="keyword">while</span> (ary[moveL] &lt;= temp &amp;&amp; moveR &gt; moveL)</span><br><span class="line">moveL++;</span><br><span class="line"><span class="keyword">if</span> (moveL &lt; moveR) &#123;</span><br><span class="line">t = ary[moveL];</span><br><span class="line">ary[moveL] = ary[moveR];</span><br><span class="line">ary[moveR] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ary[left] = ary[moveR];</span><br><span class="line">ary[moveR] = temp;</span><br><span class="line"></span><br><span class="line">QuickSweep(ary, left, moveR - <span class="number">1</span>);</span><br><span class="line">QuickSweep(ary, moveR + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h1><p>  队列是一种特殊的线性结构，只允许在队列的首部（head）进行删除操作（出队），而在队列的尾部（tail）进行插入操作（入队），当没有元素时（head&#x3D;tail）称为空队列,是一种<strong>先进先出</strong>的数据结构</p><p>​      队列有三个基本元素（一个数组，两个变量），可以转为一个结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queen</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"><span class="type">int</span> tail;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>​       栈则是一种<strong>后进后出</strong>的数据结构，限定为只能在一端进行插入和删除操作</p><p>​       栈有两个基本元素（一个数组，一个变量），同样可以转化为结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>​    使用结构体，指针，malloc函数来生成链表，最优的一种是双向循环链表，能有效避免空指针的问题，在插入和删除时也能更加从容</p><ul><li>要保存head的地址</li><li>结构体中有next和pre，分别用来储存下一个节点和上一个节点的地址</li><li>最后一个节点的next指向head，head的pre指向最后一个节点</li><li>head不储存数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Node* next;</span><br><span class="line">Node* pre;</span><br><span class="line"><span class="type">char</span> data[<span class="number">52</span>];</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="comment">//构造链表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    node* head = <span class="literal">NULL</span>;</span><br><span class="line">    head = creathead(head)</span><br><span class="line">    addlist(head)</span><br><span class="line">&#125;</span><br><span class="line">node* creathead(node* head)</span><br><span class="line">&#123;</span><br><span class="line">head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">head-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addlist</span><span class="params">(node* head)</span>&#123;</span><br><span class="line">     node* <span class="built_in">list</span>, * cur;</span><br><span class="line">     <span class="built_in">list</span> = head;</span><br><span class="line">     cur = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">     <span class="built_in">list</span>-&gt;next = cur;</span><br><span class="line">     cur-&gt;pre = <span class="built_in">list</span>;</span><br><span class="line">     cur-&gt;next = head;</span><br><span class="line">     <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">     head-&gt;pre = cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索（dfs）"><a href="#深度优先搜索（dfs）" class="headerlink" title="深度优先搜索（dfs）"></a>深度优先搜索（dfs）</h1><ul><li><p>关键在于解决“当下该如何做”和“下一步如何做”</p><p>基本模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span>&#123;</span><br><span class="line">判断边界终止递归</span><br><span class="line">    尝试每一种可能 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        标记;</span><br><span class="line">        继续下一步dfs(step+<span class="number">1</span>);</span><br><span class="line">        取消标记;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span>[<span class="number">6</span>][<span class="number">6</span>], <span class="type">int</span>[<span class="number">6</span>][<span class="number">6</span>], <span class="type">int</span>*, <span class="type">int</span>, <span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> act[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">map</span>[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> trace[<span class="number">6</span>][<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> max[<span class="number">1</span>];</span><br><span class="line">max[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">trace[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">Find(<span class="built_in">map</span>, trace, max, <span class="number">1</span>, <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最小路径是%d&quot;</span>, max[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span> <span class="built_in">map</span>[<span class="number">6</span>][<span class="number">6</span>], <span class="type">int</span> trace[<span class="number">6</span>][<span class="number">6</span>], <span class="type">int</span>*max, <span class="type">int</span> x, <span class="type">int</span> y,<span class="type">int</span> count)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(max[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">max[<span class="number">0</span>] = count;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (count &lt; max[<span class="number">0</span>])</span><br><span class="line">max[<span class="number">0</span>] = count;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> tx = x + act[i][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ty = y + act[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tx &gt;= <span class="number">1</span> &amp;&amp; tx &lt;= <span class="number">5</span> &amp;&amp; ty &gt;= <span class="number">1</span> &amp;&amp; ty &lt;= <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (trace[tx][ty] != <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[tx][ty] != <span class="number">1</span>) &#123;</span><br><span class="line">trace[tx][ty] = <span class="number">1</span>;</span><br><span class="line">Find(<span class="built_in">map</span>, trace, max, tx, ty, count+<span class="number">1</span>);</span><br><span class="line">trace[tx][ty] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li>在模拟人物在二维数组内移动时，可将人物的移动(即每次移动x，y坐标的变化)存入数组，这样会方便for循环遍历任务的移动</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> act[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><h1 id="广度优先搜索（bfs）"><a href="#广度优先搜索（bfs）" class="headerlink" title="广度优先搜索（bfs）"></a>广度优先搜索（bfs）</h1><p>​        层层递进，将所有点放在一个线性表中，每次进行移动都将移动后的点加入线性表，并使tail++，在遍历完四个方向后，使head++</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">trace</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="type">int</span> f;</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line">&#125;trace;</span><br><span class="line"><span class="type">int</span> act[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitMap</span><span class="params">(<span class="type">int</span>[][<span class="number">50</span>],<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitPosition</span><span class="params">(trace*)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">FindMin</span><span class="params">(trace*,<span class="type">int</span>[][<span class="number">50</span>], <span class="type">int</span>[][<span class="number">50</span>], <span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> head, <span class="type">int</span> tail,<span class="type">int</span> ,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span>,trace*)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> book[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">trace t[<span class="number">2500</span>];</span><br><span class="line"><span class="type">int</span> <span class="built_in">map</span>[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> p, q;</span><br><span class="line"><span class="type">int</span> head = <span class="number">1</span>, tail = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> w, l;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入地图的长和宽：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;w);</span><br><span class="line">InitMap(<span class="built_in">map</span>,l,w);</span><br><span class="line">InitPosition(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入目标地点：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;q);</span><br><span class="line">Print(FindMin(t, book, <span class="built_in">map</span>, p, q, head, tail, l, w),t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitMap</span><span class="params">(<span class="type">int</span> <span class="built_in">map</span>[][<span class="number">50</span>],<span class="type">int</span> l,<span class="type">int</span> w)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入地图&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= w; j++)</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitPosition</span><span class="params">(trace *trace)</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入初始坐标:&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">trace[<span class="number">1</span>].x = x;</span><br><span class="line">trace[<span class="number">1</span>].y = y;</span><br><span class="line">trace[<span class="number">1</span>].f = <span class="number">0</span>;</span><br><span class="line">trace[<span class="number">1</span>].s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">FindMin</span><span class="params">(trace*trace, <span class="type">int</span> book[][<span class="number">50</span>], <span class="type">int</span> <span class="built_in">map</span>[][<span class="number">50</span>], <span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> head, <span class="type">int</span> tail,<span class="type">int</span> l,<span class="type">int</span> w)</span> &#123;</span><br><span class="line"><span class="type">int</span> tx, ty;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">tx = trace[head].x + act[i][<span class="number">0</span>];</span><br><span class="line">ty = trace[head].y + act[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (tx&lt;<span class="number">1</span> || tx&gt;w || ty&lt;<span class="number">1</span> || ty&gt;l)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[tx][ty] == <span class="number">0</span> &amp;&amp; book[tx][ty] == <span class="number">0</span>) &#123;</span><br><span class="line">trace[tail].x = tx;</span><br><span class="line">trace[tail].y = ty;</span><br><span class="line">trace[tail].f = head;</span><br><span class="line">trace[tail].s = trace[head].s + <span class="number">1</span>;</span><br><span class="line">book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">tail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx == p &amp;&amp; ty == q)</span><br><span class="line"><span class="keyword">return</span> tail<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> tail, trace*t)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t[tail].s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学</title>
      <link href="/2023/09/15/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
      <url>/2023/09/15/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<script type="text/x-mathjax-config"> MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'],['\\(','\\)']]} }); </script> <script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"> </script><h1 id="9-1-Relations-and-their-properties"><a href="#9-1-Relations-and-their-properties" class="headerlink" title="9.1 Relations and their properties"></a>9.1 Relations and their properties</h1><h2 id="Cartesian-product-笛卡尔乘积"><a href="#Cartesian-product-笛卡尔乘积" class="headerlink" title="Cartesian product(笛卡尔乘积)"></a>Cartesian product(笛卡尔乘积)</h2><p>If A and B are two nonempty sets</p><p>$$A\times B&#x3D;{(a,b)|a \in A \quad and \quad b \in B}$$</p><h2 id="Partition-划分-or-quotient-set（商集）"><a href="#Partition-划分-or-quotient-set（商集）" class="headerlink" title="Partition(划分)or quotient set（商集）"></a>Partition(划分)or quotient set（商集）</h2><ul><li>A<del>1</del>和A<del>2</del>是P种不同的子集，那么<strong>A<del>1</del>$\cap$A<del>2</del>&#x3D;$\emptyset$</strong></li><li>A的所有划分后的子集和就是A</li></ul><h2 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h2><p><strong>Definition：</strong> Let <em>A</em> and <em>B</em> be nonempty sets. A <font color="red">relation R from A to B</font> is a subset of <em>A</em> $\times$B</p><ul><li><p>If <em>R</em> $\subseteq$ <em>A</em> $\times$<em>B</em> and (<em>a</em>, <em>b</em>)$\in$ <em>R</em>, we say that <font color="red"><em>a</em> is related to <em>b</em> by <em>R</em></font>, and we also write <font color="red"><em>a</em> <em>R</em> <em>b</em></font>.</p></li><li><p>If <em>a</em> is not related to <em>b</em> by <em>R</em>, we write <em>a</em> <em>R&#x2F;</em> <em>b</em>.</p></li><li><p>R$\subseteq$A$\times$A is a relation on A</p></li></ul><p>eg:</p><p>​     Let|A|&#x3D;n,How many relations are there on a set A?    -&gt;   <font color="red">2<sup>n<sup>2</sup></sup></font></p><p>​    <font color="blue">解析</font>:A有n个基数，A$\times$A的集合中就有n^2^个基数，那么就有 <font color="red">2<sup>n<sup>2</sup></sup></font>种子集，每一种子集就代表一种关系</p><p>Dom(<em>R</em>), the <em>domain</em> of <em>R</em> is a subset of <em>A</em>, is the set of all first elements in the pairs that make up <em>R</em></p><p>Ran(<em>R</em>), the <em>range</em> of <em>R</em> is the set of elements in <em>B</em> that are second elements of pairs in <em>R.</em></p><h3 id="R-relative-set"><a href="#R-relative-set" class="headerlink" title="R-relative set"></a>R-relative set</h3><p>If <em>R</em> is a relation from <em>A</em> to <em>B</em> and <em>x</em>$\in$ <em>A</em>.</p><p>Define <em>R</em>(<em>x</em>), the <strong>R-relative set of x</strong>, to be the set of <font color="red">all <em>y</em> in <em>B</em> with the property that <em>x</em> is <em>R</em>-related to <em>y</em>.</font><br>$$<br>R(x)&#x3D;{y \in B|x R  y}<br>$$<br>Similarly, if <em>A</em><del>1</del>$\subseteq$ <em>A</em>, then <em>R</em>(<em>A</em><del>1</del>), the <em>R-relative set of A</em><del>1</del>, is the set of all <em>y</em> in <em>B</em> with the property that <em>x</em> is <em>R</em>-related to <em>y</em> for some <em>x</em> in <em>A</em><del>1</del>.<br>$$<br>R(x)&#x3D;{y \in B|x R  y\quad for\quad some \quad x\quad in \quad A<del>1</del>}<br>$$</p><h4 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h4><ul><li>*<em>If <em>A</em>1 $\subseteq$<em>A</em>2, then <em>R</em>(<em>A1</em>) $\subseteq$ <em>R</em>(<em>A</em>2)</em>*</li><li>*<em>R(<em>A1</em>$\cup$ <em>A</em>2) &#x3D; <em>R</em>(<em>A</em>1) $\cap$ <em>R</em>(<em>A</em>2)</em>*</li><li>*<em>R(<em>A</em>1 $\cup$<em>A</em>2) &#x3D;<em>R</em>(<em>A</em>1) $\cup$ <em>R</em>(<em>A</em>2)</em>*</li></ul><h3 id="Special-properties"><a href="#Special-properties" class="headerlink" title="Special properties"></a>Special properties</h3><h4 id="Reflexive-自反-and-Irreflexive（反自反）"><a href="#Reflexive-自反-and-Irreflexive（反自反）" class="headerlink" title="Reflexive(自反) and Irreflexive（反自反）"></a>Reflexive(自反) and Irreflexive（反自反）</h4><h5 id="re-自反"><a href="#re-自反" class="headerlink" title="[re]自反"></a>[re]自反</h5><p><strong>Definition</strong>:对每个元素a$\in$A有（a，a）$\in$R,那么定义在集合A上的<font color="red">关系R称为自反的</font></p><p>R is reflexive iff<br>$$<br>\forall x[x\in A-&gt;(x,x)\in R]<br>$$</p><h5 id="ir-反自反"><a href="#ir-反自反" class="headerlink" title="[ir]反自反"></a>[ir]反自反</h5><p><em>R</em> is <em>irreflexive</em> iff<br>$$<br>\forall x[x\in A-&gt;(x,x)\notin R]<br>$$</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_19-30-00.png"></p><h4 id="Symmetric（对称），Asymmetric（非对称），and-Antisymmetric（反对称）"><a href="#Symmetric（对称），Asymmetric（非对称），and-Antisymmetric（反对称）" class="headerlink" title="Symmetric（对称），Asymmetric（非对称），and Antisymmetric（反对称）"></a>Symmetric（对称），Asymmetric（非对称），and Antisymmetric（反对称）</h4><h5 id="Sy-对称"><a href="#Sy-对称" class="headerlink" title="[Sy]对称"></a>[Sy]对称</h5><p><strong>Definition</strong>:对于任意（a,b)$\in$A，若只要（a，b）$\in$R,就有（b，a）$\in$R,则称定义在集合A上的关系R是对称的</p><p>R is <em>Asymmetric</em> iff<br>$$<br>\forall x\forall y[( x, y ) \in R-&gt; (y, x ) \in R]<br>$$</p><h5 id="As-非对称"><a href="#As-非对称" class="headerlink" title="[As]非对称"></a>[As]非对称</h5><p>R is <em>Asymmetric</em> iff<br>$$<br>\forall x\forall y[( x, y ) \in R-&gt; (y, x ) \notin R]<br>$$</p><h5 id="Ats-反对称"><a href="#Ats-反对称" class="headerlink" title="[Ats]反对称"></a>[Ats]反对称</h5><p><strong>Definition</strong>:不存在由不同元素a和b构成的有序对，是的a与b有关系，并且b与a也有关系，也就是说，唯一一种a与b有关系并且b与a有关系的情况是a和b是相同的元素</p><p><em>R</em> is <em>antisymmetric</em> iff<br>$$<br>\forall x\forall y[( x, y ) \in R \wedge(y,x)\in R-&gt; x&#x3D;y]<br>$$<br><strong>Note</strong>：</p><ul><li>对称与反对称概念不是对立的，一个关系可以同时有这两种性质或者这两种性质都没有</li></ul><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_19-43-37.png"></p><h4 id="Transitive（传递）"><a href="#Transitive（传递）" class="headerlink" title="Transitive（传递）"></a>Transitive（传递）</h4><h5 id="tr-传递"><a href="#tr-传递" class="headerlink" title="[tr]传递"></a>[tr]传递</h5><p><em>R</em> is <em>transitive</em> iff<br>$$<br>\forall x\forall y\forall z[( x, y ) \in R \wedge ( y, z ) \in R-&gt; ( x, z ) \in R]<br>$$</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_19-45-55.png"></p><h4 id="Composition-合成"><a href="#Composition-合成" class="headerlink" title="Composition(合成)"></a>Composition(合成)</h4><p><strong>Definition</strong>： R是集合A到集合B的关系，S是集合B到集合C的关系。R与S的合成是有序对（a,c）的集合构成的关系，a$\in$A,c$\in$C,存在一个b$\in$B的元素，使得(a,b)$\in$S,我们用S$\circ$R表示R与S的合成</p><h5 id="n元素各种关系的数目"><a href="#n元素各种关系的数目" class="headerlink" title="n元素各种关系的数目"></a>n元素各种关系的数目</h5><p><a href="https://blog.csdn.net/zsdoujiang/article/details/105151135"></a></p><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li>当关系是对称时，，同时存在（a,c）,(c,a)，此时在关注传递性时，要注意必须（a,a）,(c,c)存在时，即a，c自反时才是可传递的</li></ul><h5 id="关系的幂"><a href="#关系的幂" class="headerlink" title="关系的幂"></a>关系的幂</h5><p><strong>Definition</strong>： $R^1$&#x3D;$R$,$R^n+1$&#x3D;$R^n$ $\circ$$R$</p><p><strong>Theorem</strong></p><ul><li>集合A上的关系R是传递的，当且仅当n&#x3D;1,2,3…有$R^n$$\subseteq$$R$</li></ul><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_20-13-37.png"></p><h1 id="9-2-N-ary-Relations"><a href="#9-2-N-ary-Relations" class="headerlink" title="9.2 N-ary Relations"></a>9.2 N-ary Relations</h1><h2 id="n-ary-relation"><a href="#n-ary-relation" class="headerlink" title="n-ary relation"></a>n-ary relation</h2><p><strong>Definition</strong>:A1,A2,A3…是集合，定义在这些集合上的n元关系是A1$\times$A2$\times$A3…$\times$An的子集。这些集合A1，A2，A3…称为关系的<strong>domains（域）</strong>，n称为关系的<strong>degree（阶）</strong></p><h2 id="Relational-database"><a href="#Relational-database" class="headerlink" title="Relational database"></a>Relational database</h2><p>​       当n元组的某个<strong>域</strong>的值能确定这个n元组时，n元关系的这个这个域就叫作<strong>主键（primary key）</strong>。也就是说，当关系中没有两个n元组在这个域有相同的值时，这个域就是<strong>主键</strong></p><p>​        在一个n元关系中，域的组合也可以唯一地标识n元组。当一组域的值确定一个关系中的n元组时，这些域的笛卡尔乘积就叫作<strong>复合主键（composite key）</strong></p><p><strong>tips</strong>：</p><ul><li><em>n</em>-tuples（n元组）</li></ul><h2 id="Selection-operator（选择运算符）"><a href="#Selection-operator（选择运算符）" class="headerlink" title="Selection operator（选择运算符）"></a>Selection operator（选择运算符）</h2><p><strong>Definition</strong>： R是一个n元关系，C是R中元素可能满足的一个条件。那么选择运算符s<del>c</del>将n元关系R映射到R中满足条件C的所有n元组构成的n元关系</p><p>Let <em>A</em> be any <em>n</em>-ary domain <em>A</em>&#x3D;<em>A</em>1×…×<em>An</em>, and let <em>C</em>:<em>A</em>→{<strong>T</strong>,<strong>F</strong>}<br>$$<br>\forall R\subseteq A, sc(R) &#x3D; {a\in R | sc(a) &#x3D; T}<br>$$</p><h2 id="Projection-operator-投影"><a href="#Projection-operator-投影" class="headerlink" title="Projection operator(投影)"></a>Projection operator(投影)</h2><p><strong>Definition</strong>： 投影P<del>i1，i2…im</del>，删去n元组的n-m个分量，保留i1，i2…im个分量</p><h2 id="Join-operator（连接）"><a href="#Join-operator（连接）" class="headerlink" title="Join operator（连接）"></a>Join operator（连接）</h2><p>当两个表有某些相同的域时，连接运算可将这两个表合成一个表</p><h1 id="9-3-Representing-relations"><a href="#9-3-Representing-relations" class="headerlink" title="9.3 Representing relations"></a>9.3 Representing relations</h1><h2 id="The-matrix-of-a-relation（矩阵表示关系）"><a href="#The-matrix-of-a-relation（矩阵表示关系）" class="headerlink" title="The matrix of a relation（矩阵表示关系）"></a>The matrix of a relation（矩阵表示关系）</h2><p>关系R可以用矩阵M<del>R</del>&#x3D;[m<del>ij</del>]来表示，其中<br>$$<br>mij&#x3D;\begin{cases} 1,(ai,bj)\in R\ 0, (ai,bj)\notin R\end{cases}<br>$$</p><p>换句话说，ai和bj有关系时表示R的0-1矩阵的（i，j）项是1，没关系时是0</p><p>可以用0-1矩阵表示特殊关系</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_21-24-45.png"></p><h3 id="Combining-connection-matrices"><a href="#Combining-connection-matrices" class="headerlink" title="Combining connection matrices"></a>Combining connection matrices</h3><ul><li>MR1$\cup$R2&#x3D;M<del>R1</del>$\vee$R<del>2</del></li><li>MR1$\cap$R2&#x3D;M<del>R1</del>$\wedge$M<del>R2</del></li></ul><h3 id="Composite-of-relations"><a href="#Composite-of-relations" class="headerlink" title="Composite of relations"></a>Composite of relations</h3><p>通过布尔积得到<br>$$<br>M_S ◦_R &#x3D; M_R ⊙M_S.<br>$$</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_21-36-35.png"></p><h2 id="The-digraph-of-a-relation-用图表示关系"><a href="#The-digraph-of-a-relation-用图表示关系" class="headerlink" title="The digraph of a relation(用图表示关系)"></a>The digraph of a relation(用图表示关系)</h2><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_21-39-53.png"></p><p><strong>in-degree</strong>: 根据图表来看有多少箭头指向目标(看目标的列有多少个1)</p><p><strong>out-degree</strong>:根据图标来看有多少箭头从目标发出（看目标行有多少个1）</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_21-43-54.png"></p><h3 id="用图表表示特殊关系"><a href="#用图表表示特殊关系" class="headerlink" title="用图表表示特殊关系"></a>用图表表示特殊关系</h3><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-15_21-48-15.png"></p><h2 id="Restriction"><a href="#Restriction" class="headerlink" title="Restriction"></a>Restriction</h2><p><strong>Definition</strong>: If <em>R</em> is a relation on a set <em>A</em>, and <em>B</em> is a subset of <em>A</em>, the <em>restriction of R to B</em> is<br>$$<br>R \cap (B \times B)<br>$$</p><h1 id="9-4关系的闭包-Closures-of-relation"><a href="#9-4关系的闭包-Closures-of-relation" class="headerlink" title="9.4关系的闭包(Closures of relation)"></a>9.4关系的闭包(Closures of relation)</h1><p>定义：设R 是集合A 上的关系，如果存在包含R的具有性质P的关系S,并且S是所有包含R且具有性质P的子集（即S是包含关系R的最小的关系），那么S称为R关于性质P的闭包。</p><ul><li>自反闭包（reflexive closure）:r(R)</li><li>对称闭包（symmetric closure）:s(R)</li><li>传递闭包（transitive) :t(R)</li></ul><p><img src="/"></p><p><img src="/"></p><h2 id="有向图的路径-paths"><a href="#有向图的路径-paths" class="headerlink" title="有向图的路径(paths)"></a>有向图的路径(paths)</h2><p><img src="/"></p><p><img src="/"></p><p><img src="/"></p><p>R^n^:R是集合A上的关系。从a到b存在一条长为n的路径（即找出所有两点相距路径为2的a，b两点并连线）</p><p>R*:连通性关系由形如（a，b）的有序对构成，使得在关系R中，从顶点a到b之间存在一条长度至少为1的路径（找出所有路径至少为1的两点并连线）</p><ul><li>关系R的传递闭包等于连通性关系R*</li></ul><p><img src="/"></p><p><img src="/"></p><p><img src="/"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统</title>
      <link href="/2023/09/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/09/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<script type="text/x-mathjax-config"> MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'],['\\(','\\)']]} }); </script> <script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"> </script><h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><h3 id="布尔运算（Boolean-Algebras）"><a href="#布尔运算（Boolean-Algebras）" class="headerlink" title="布尔运算（Boolean Algebras）"></a>布尔运算（Boolean Algebras）</h3><ul><li><p>&amp;表交集</p></li><li><p>|表并集</p></li><li><p><font color="red">~</font>表非</p></li><li><p><font color="red">^</font>表异或</p></li></ul><h3 id="位向量"><a href="#位向量" class="headerlink" title="位向量"></a>位向量</h3><p><strong>位向量</strong>的一个应用是表示有限集合，我们可以用[a<sub>w-1</sub>,..,a<sub>1</sub>,a<sub>0</sub>]编码A{0，1，…,m-1}的任何子集。</p><p>比如我们可以用</p><p>位向量a&#x3D;[01101001]表示集合A&#x3D;{0,3,5,6}</p><p>位向量b&#x3D;[01010101]表示集合B&#x3D;{0,2,4,6}</p><p>使用这种编码集合，布尔运算&amp;和|分别表示集合的交和并，而~对应于集合的补，例如a&amp;b&#x3D;[01000001]</p><h3 id="位运算（Bit-Level-Operations）"><a href="#位运算（Bit-Level-Operations）" class="headerlink" title="位运算（Bit-Level Operations）"></a>位运算（Bit-Level Operations）</h3><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-14_20-35-41.png"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-14_20-38-05.png"></p><h3 id="逻辑运算（Logic-Operations-）"><a href="#逻辑运算（Logic-Operations-）" class="headerlink" title="逻辑运算（Logic Operations ）"></a>逻辑运算（Logic Operations ）</h3><p>Logic Operations: <strong>&amp;&amp;</strong>, <strong>||</strong>, <strong>!</strong></p><ul><li>把0看作false</li><li>非零全都视作true</li></ul><p>example：</p><ul><li>!0x41-&gt;0x00</li><li>!0x00-&gt;0x01</li><li>!!0x41-&gt;0x01</li><li>0x69&amp;&amp;0x55-&gt;0x01</li><li>0x69||0x55-&gt;0x01</li></ul><h3 id="移位操作（Shift-Operations）"><a href="#移位操作（Shift-Operations）" class="headerlink" title="移位操作（Shift Operations）"></a>移位操作（Shift Operations）</h3><p>Left Shift: x&lt;&lt; y</p><ul><li>扔掉x左边y位数</li><li>在右边填上相应数量的0</li></ul><p>Right Shift: x&gt;&gt; y</p><p>右移分为两种</p><ul><li><strong>Logical shift</strong><ul><li>扔掉右边y位数</li><li>在左边填上相应数量的0</li></ul></li><li><strong>Arithmetic shift</strong> <ul><li>扔掉右边y位数</li><li>在左边填上相应数量的最高位数字</li></ul></li></ul><p><font color="red">一般对有符号数使用算数右移，无符号数只能是逻辑右移</font></p><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><p>描述用位来编码整数的两种不同方式</p><ul><li>只能表示非负数（Unsigned）</li><li>表示负数，零和正数（Two’s Complement（补码））</li></ul><h3 id="数学术语"><a href="#数学术语" class="headerlink" title="数学术语"></a>数学术语</h3><ul><li>B2T<del>w</del>：二进制转补码</li><li>B2U<del>w</del>：二进制转无符号数</li><li>U2B<del>w</del>：无符号数转二进制</li><li>U2T<del>W</del>：无符号转补码</li><li>T2B<del>w</del>:    补码转二进制</li><li>T2U<del>w</del>:    补码转无符号数</li><li>TMin<del>w</del>：补码最小值</li><li>TMax<del>w</del>：补码最大值</li><li>UMax<del>w</del>：最大无符号数</li></ul><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/6059bd34c7c1b76913c2efe757b38cf3cee4037e/Snipaste_2023-09-17_18-47-22.png"></p><h3 id="补码与无符号数的范围"><a href="#补码与无符号数的范围" class="headerlink" title="补码与无符号数的范围"></a>补码与无符号数的范围</h3><p><strong>UMin&#x3D;0   ,UMax&#x3D;2^w^-1(111….1)</strong></p><p><strong>TMin&#x3D;-2^w-1^(1000..0),TMax&#x3D;2^w-1^-1(0111…1),Minus 1(11111)</strong></p><p>Observation:</p><ul><li>|TMin|&#x3D;Tmax+1</li><li>UMax&#x3D;2*Tmax+1</li></ul><h3 id="补码与无符号数之间的转换"><a href="#补码与无符号数之间的转换" class="headerlink" title="补码与无符号数之间的转换"></a>补码与无符号数之间的转换</h3><ul><li>两者之间转换，不改变任何东西，只改变解读数的方法</li><li><font color="red">如果一个运算数是有符号的而另一个是无符号的，那么C语言会隐式地将有符号参数转换为无符号参数</font></li></ul><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/6059bd34c7c1b76913c2efe757b38cf3cee4037e/Snipaste_2023-09-17_18-58-54.png"></p><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>无符号：</p><p>0&lt;&#x3D;x,y&lt;2^w^</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-23-36.png"></p><p>有符号：</p><p>-2^w-1^&lt;&#x3D;x,y&lt;&#x3D;2^w-1^-1</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-25-38.png"></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>无符号：</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-33-06.png"></p><p>有符号：</p><ul><li>先将补码转换成原码再相乘</li><li>补码转原码步骤是取反再加1</li></ul><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-35-10.png"></p><h3 id="快速进行2的n次方的乘除运算"><a href="#快速进行2的n次方的乘除运算" class="headerlink" title="快速进行2的n次方的乘除运算"></a>快速进行2的n次方的乘除运算</h3><p>乘：</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-38-07.png"></p><p>除：</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-38-58.png"></p><h3 id="求负数"><a href="#求负数" class="headerlink" title="求负数"></a>求负数</h3><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_11-43-32.png"></p><h2 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h2><h3 id="小端法和大端法"><a href="#小端法和大端法" class="headerlink" title="小端法和大端法"></a>小端法和大端法</h3><p>小端法：最低有效字节在前面</p><p>大端法：最高有效字节在前面</p><p>eg：在0x01234567中，高位字节的十六进制为0x01，低位字节为0x67</p><p><img src="https://raw.githubusercontent.com/Clear1oveE/copy.github.io/master/Snipaste_2023-09-19_19-52-34.png"></p><p>eg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start,<span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="comment">//该指针每次只在内存中读取一字节内容，只能以16进制表示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span> *start,<span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="comment">//该指针每次在内存中读取并处理四字节内容，使每个start[i]中储存一个整数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> test = <span class="number">0x87654321</span>;</span><br><span class="line">byte_pointer i =(byte_pointer) &amp; test;</span><br><span class="line"><span class="type">int</span>* i2 = &amp;test;</span><br><span class="line">show_bytes(i, <span class="number">4</span>);<span class="comment">//输出 21 43 65 87</span></span><br><span class="line">show_int(i2, <span class="number">1</span>);<span class="comment">//输出87654321</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,start[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span>* start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, start[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start,<span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* s = <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//const char* s = &quot;abcdef&quot;; 的意义是将字符串字面值 &quot;abcdef&quot; 的内存首地址赋值给指针 s。</span></span><br><span class="line">show_bytes((byte_pointer)s,<span class="built_in">strlen</span>(s));<span class="comment">//结果是61 62 63 64 65 66 “a~z”的ASCII码是0x61~0x7A</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,start[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/09/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/09/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><p><strong>数据元素，数据项:</strong></p><ul><li><strong>数据元素</strong>是数据的<font color="red">基本单位</font>,通常作为一个整体进行考虑和处理</li><li>一个<strong>数据元素</strong>由若干<strong>数据项</strong>组成，<strong>数据项</strong>是构成<strong>数据元素</strong>的<font color="red">不可分割的最小单位</font>，如果一个数据项由多个更细分的属性组成，我们称为<strong>组合项</strong></li><li>eg:一个人的姓名，学号，年龄，生日分别是一个<strong>数据项</strong>共同构成一个<strong>数据元素</strong>，其中生日包含年，月，日等更细分的属性，所以生日是组合项</li></ul><p><font color="red">注意区分数据对象和数据结构</font></p><p><strong>数据对象：</strong>是<font color="red">具有相同性质</font>的<strong>数据元素</strong>的集合，是<strong>数据</strong>的一个子集</p><p><strong>数据结构</strong>：是<font color="red">相互之间存在一种或多种特定关系</font>的<strong>数据元素</strong>的集合，<strong>数据元素</strong>相互之间的关系称为<strong>结构（structure）</strong></p><p><strong>四类基本结构</strong>：</p><ul><li>集合:各个元素同属一个集合，并为其他关系</li><li>线性结构：数据元素是一对一关系</li><li>树形结构：数据元素之间是一对多的关系</li><li>图状结构或网格结构：数据元素之间是多对多的关系</li></ul><p><strong>基本运算</strong></p><ul><li>查找第i个数据元素</li><li>在第i个位置插入新的数据元素</li><li>删除第i个位置的数据元素</li></ul><p><strong>物理结构（存储结构）</strong></p><ul><li>顺序存储：把逻辑上相邻的元素存储在物理位置也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</li><li>链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素的逻辑关系</li><li>索引存储：存储元素信息时，还建立附加的索引表。索引表每项称为索引项，其一般形式为（关键字，地址）</li><li>散列存储：根据元素的关键字直接计算出元素的地址，又称哈希存储</li></ul><p>在计算机中表示信息的最小单位是二进制数的一位，叫做<strong>位（bit）</strong></p><p>在计算机中我们可以用一个由若干<strong>位</strong>组合起来形成的一个位串表示一个数据元素，称这个位串为<strong>元素（element）</strong>或<strong>节点（node）</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#学习中</title>
      <link href="/2023/09/11/C-%E5%AD%A6%E4%B9%A0%E4%B8%AD/"/>
      <url>/2023/09/11/C-%E5%AD%A6%E4%B9%A0%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h2 id="C-的两个模板"><a href="#C-的两个模板" class="headerlink" title="C#的两个模板"></a>C#的两个模板</h2><p>​      Main（）是C#应用程序的主入口点，执行程序时，无论是<strong>控制台应用程序</strong>还是<strong>Windows窗体应用程序</strong>都从Main（）主程序开始。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加入程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通常来说按下F5键，控制台窗口会立即关闭。为了让程序执行的结果画面暂停，在主程序Main（）末尾加上如下语句：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     Console.WriteLine(<span class="string">&quot;我的第一个C#程序&quot;</span>);</span><br><span class="line">     Console.ReadLine();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Windows-窗体应用程序"><a href="#Windows-窗体应用程序" class="headerlink" title="Windows 窗体应用程序"></a>Windows 窗体应用程序</h3><p>​     添加第二个项目。依次选择菜单选项**”文件-&gt;添加-&gt;新建项目”**，添加Windows窗体应用模板；</p><p>​     在窗体上加入控件。在<strong>工具箱</strong>中展开<strong>公共控件</strong>；将<strong>Label</strong>和<strong>Button</strong>控件添加到窗体中</p><p>​     选择控件，将“属性”窗口的<strong>Font</strong>展开，可以改变字体；<strong>Text</strong>可以改变控件的命名</p><p>​     鼠标双击<strong>Button</strong>控件，进入其事件处理程序并编写程序代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            label1.Text = <span class="string">&quot;Visual C#应用程序&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="设计语言结构"><a href="#设计语言结构" class="headerlink" title="设计语言结构"></a>设计语言结构</h2><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><p>读取有三种方法：</p><ul><li>Console.Read();&#x2F;&#x2F;从标准数据流读取<strong>下一个字符</strong></li><li>Console.ReadLine();&#x2F;&#x2F;读取用户输入的<strong>一连串字符</strong>，可以通过变量储存该字符串</li><li>Console.ReadKey()&#x2F;&#x2F;获取用户按下的<strong>下一个字符或功能键</strong></li></ul><h4 id="用ReadLine读取数据"><a href="#用ReadLine读取数据" class="headerlink" title="用ReadLine读取数据"></a>用ReadLine读取数据</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Console.Write(<span class="string">&quot;请输入你的名字：&quot;</span>);</span><br><span class="line">           <span class="built_in">string</span> name = Console.ReadLine();</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;Good day!&#123;0&#125;&quot;</span>, name);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>​        值得一提的是，在 C# 中，您可以使用字符数组来表示字符串，但是，更常见的做法是使用 <strong>string</strong> 关键字来声明一个字符串变量。string 关键字是 <strong>System.String</strong> 类的别名。</p><p>下面是string与字符数组的一些区别：</p><ul><li>string可以包含任意数量的字符，但一旦存入，字符串是不可变的，这意味着一旦创建，就不能对其进行更改。如果需要更改字符串，需要创建一个新的字符串对象。</li><li>与字符串不同，字符数组是可变的，并且可以直接更改。</li></ul><p>下面是一个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> myString = <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 创建一个字符串对象</span></span><br><span class="line"><span class="built_in">char</span> myChar = <span class="string">&#x27;H&#x27;</span>; <span class="comment">// 创建一个字符变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问字符串中的单个字符</span></span><br><span class="line"><span class="built_in">char</span> firstChar = myString[<span class="number">0</span>]; <span class="comment">// 获取字符串的第一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作字符串</span></span><br><span class="line"><span class="built_in">string</span> newString = myString.Replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;C#&quot;</span>); <span class="comment">// 替换字符串中的部分内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储多个字符</span></span><br><span class="line"><span class="built_in">char</span>[] letters = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span> &#125;; <span class="comment">// 创建一个字符数组</span></span><br><span class="line"><span class="built_in">char</span> firstLetter = letters[<span class="number">0</span>]; <span class="comment">// 获取字符数组的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改字符</span></span><br><span class="line">letters[<span class="number">0</span>] = <span class="string">&#x27;e&#x27;</span>; <span class="comment">// 更改字符数组的第一个元素</span></span><br></pre></td></tr></table></figure><h2 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h2><p>#region+tab键即可创建折叠变量</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 任意命名</span></span><br><span class="line">    <span class="comment">//代码区域</span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 1.有符号的整型变量</span></span><br><span class="line"><span class="comment">//sbyte -128~127</span></span><br><span class="line"><span class="built_in">sbyte</span> sb = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印方法</span></span><br><span class="line">Console.WriteLine(sb);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印中文的话，通过+来拼接打印</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;sbyte中储存的值是：&quot;</span> + sb);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法,注意加上$</span></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;sbyte中储存的值是：<span class="subst">&#123;sb&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int -21亿~21亿</span></span><br><span class="line"><span class="built_in">int</span> p = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//short -32768~32767</span></span><br><span class="line"><span class="built_in">short</span> s = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//long -9百万兆~9百万兆</span></span><br><span class="line"><span class="built_in">long</span> l = <span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 2.无符号的整型变量</span></span><br><span class="line"><span class="comment">//byte 0~255</span></span><br><span class="line"><span class="built_in">byte</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//uint 0~42亿</span></span><br><span class="line"><span class="built_in">uint</span> ui = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//ushort 0~65535</span></span><br><span class="line"><span class="built_in">ushort</span> us = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//ulong 0~18百万兆</span></span><br><span class="line"><span class="built_in">ulong</span> ul = <span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 3.浮点数（小数）</span></span><br><span class="line"><span class="comment">//float 存储7位有效数字，注意后面加上f</span></span><br><span class="line"><span class="comment">//之所以要加f，是因为c#中申明的小数，默认是double类型的，加f是告诉系统是float类型的</span></span><br><span class="line"><span class="built_in">float</span> f = <span class="number">1.0123456789f</span>;</span><br><span class="line">Console.WriteLine(f);</span><br><span class="line"><span class="comment">//double 存储15~17有效数字</span></span><br><span class="line"><span class="built_in">double</span> d = <span class="number">0.123456789123456789</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 4.特殊类型</span></span><br><span class="line"><span class="comment">//bool true fasle 表示真假的数据类型</span></span><br><span class="line"><span class="built_in">bool</span> bo = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bool</span> bo2 = <span class="literal">false</span>;</span><br><span class="line">Console.WriteLine(bo + <span class="string">&quot;_&quot;</span> + bo2);</span><br><span class="line"><span class="comment">//char 用来存储单个字符的变量类型,加‘’</span></span><br><span class="line"><span class="built_in">char</span> c = <span class="string">&#x27;龙&#x27;</span>;</span><br><span class="line">Console.WriteLine(c);</span><br><span class="line"><span class="comment">//string 是字符串类型，用来存储多个字符，没有上限</span></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;sahdahsldnhlkd&quot;</span>;</span><br><span class="line">Console.WriteLine(str);</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串与整数的转换"><a href="#字符串与整数的转换" class="headerlink" title="字符串与整数的转换"></a>字符串与整数的转换</h2><p>当使用<strong>Console.Readline（）</strong>得到用户输入的整数时，得到的是一个字符串而不是整数，此时是不可以进行加减乘除的基本运算的，此时学要用<strong>Convert</strong>将字符串转换成整数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基础写法</span></span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();<span class="comment">//此时str储存的是字符串</span></span><br><span class="line">    <span class="built_in">int</span> strInt=Convert.ToInt32(str);<span class="comment">//将字符串转化成整数</span></span><br><span class="line">    Console.WriteLine(strInt+<span class="number">17</span>);<span class="comment">//不转化的话输出的是1317，转化后输出30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//简便写法</span></span><br><span class="line">    <span class="built_in">int</span> strInt2 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    Console.WriteLine(strInt2+<span class="number">17</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> randomNumber = random.Next(<span class="number">0</span>, <span class="number">101</span>); <span class="comment">// 生成一个 0 到 100 之间的整数</span></span><br><span class="line">        Console.WriteLine(randomNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明</span></span><br><span class="line">    <span class="built_in">int</span>[] age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个固定大小的数组</span></span><br><span class="line">    <span class="built_in">int</span>[] ages=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="built_in">int</span>[] ages1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//另一种方法赋值</span></span><br><span class="line">    <span class="built_in">int</span>[] ages2;</span><br><span class="line">    ages2=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">&quot;Clearlove&quot;</span>;</span><br><span class="line">        <span class="comment">//倒序输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = str.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串全部变为小写</span></span><br><span class="line">        <span class="built_in">string</span> str1=str.ToLower();</span><br><span class="line">        Console.WriteLine(str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串全部大写</span></span><br><span class="line">        <span class="built_in">string</span> str2=str.ToUpper();</span><br><span class="line">        Console.WriteLine(str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除字符串前后空格</span></span><br><span class="line">        <span class="built_in">string</span> _str = <span class="string">&quot;  Clearlove  &quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> _str1=_str.Trim();</span><br><span class="line">        Console.WriteLine(_str+<span class="string">&quot;||&quot;</span>+_str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分割</span></span><br><span class="line">        <span class="built_in">string</span> str_ = <span class="string">&quot;Clearlove,smlz,Lwx&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span>[] strArray=str_.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">string</span> temp <span class="keyword">in</span> strArray)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参数数组"><a href="#参数数组" class="headerlink" title="参数数组"></a>参数数组</h2><p>在函数形参需要传递一个数组时，如果不加上<strong>params</strong>，那么在传递数组时，需要自己构造一个有长度的数组，但使用参数数组后，只需要传数组里的数，系统会帮你自动构建数组</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] array</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="built_in">int</span> temp <span class="keyword">in</span> array)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//系统帮我们自动构造数组</span></span><br><span class="line">           <span class="built_in">int</span> num=Add(<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line">           Console.WriteLine(num);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//自己构造数组的两种方法</span></span><br><span class="line">           <span class="built_in">int</span> num2=Add2(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">           <span class="built_in">int</span>[] array = &#123; <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line">           <span class="built_in">int</span> num3=Add2(array);</span><br><span class="line">           Console.ReadLine();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> GameState</span><br><span class="line">&#123;</span><br><span class="line">    Menu,Pause,False,Success</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameState state = GameState.Menu;</span><br><span class="line"><span class="built_in">int</span> num = (<span class="built_in">int</span>)state;</span><br><span class="line">Console.WriteLine(state);</span><br><span class="line">Console.WriteLine(num);</span><br></pre></td></tr></table></figure><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _029_委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Multiply</span>(<span class="params"><span class="built_in">double</span> param1,<span class="built_in">double</span> param2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> param1 * param2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Divide</span>(<span class="params"><span class="built_in">double</span> param1,<span class="built_in">double</span> param2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> param1 / param2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="built_in">double</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">double</span> param1,<span class="built_in">double</span> param2</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyDelegate delegate1 = Multiply;</span><br><span class="line">            MyDelegate delegate2 = Divide;</span><br><span class="line">            Console.WriteLine(delegate1(<span class="number">2</span>,<span class="number">4</span>) + delegate2(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _030_委托的使用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">OnDie</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Play</span>(<span class="params">OnDie onDie</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;战斗&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;死亡&quot;</span>);</span><br><span class="line">            onDie();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DieUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;返回首页&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Play(DieUI);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体函数"><a href="#结构体函数" class="headerlink" title="结构体函数"></a>结构体函数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _027_结构体函数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> Position</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> x;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> y;   </span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> z;</span><br><span class="line">            <span class="comment">//可以在结构体里面定义函数，并且不需要传参，参数就是结构体的变量</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;x:&#123;0&#125;,y:&#123;1&#125;,z:&#123;2&#125;&quot;</span>, x, y, z);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">struct</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> firstName;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> lastName;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">fullName</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span>+ lastName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Position pos;</span><br><span class="line">            pos.x = <span class="number">12.25</span>;</span><br><span class="line">            pos.y = <span class="number">5.88</span>;</span><br><span class="line">            pos.z = <span class="number">7.77</span>;</span><br><span class="line">            pos.Print();</span><br><span class="line"></span><br><span class="line">            Name name;</span><br><span class="line">            name.firstName = <span class="string">&quot;Steven&quot;</span>;</span><br><span class="line">            name.lastName = <span class="string">&quot;Jobs&quot;</span>;</span><br><span class="line">            Console.WriteLine(name.fullName());</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="try-catch-finally语句进行异常处理"><a href="#try-catch-finally语句进行异常处理" class="headerlink" title="try-catch-finally语句进行异常处理"></a>try-catch-finally语句进行异常处理</h2><p><strong>try</strong>块包含可能出现异常的代码（一条或多条），当try块程序检测到异常后会放弃执行后续代码，直接跳到catch块，执行catch块代码</p><p><strong>catch</strong>块用来捕捉异常，当代码块发生异常并与catch块中参数类型一样时就会执行，如果不写参数（不加括号），表示发生任何异常都会执行这个catch块</p><p><strong>finally</strong>包含始终都会执行的代码，不管有没有异常产生都会执行</p><p><strong>catch</strong>可能有<strong>0个或多个</strong>，<strong>finally</strong>可能有<strong>0个或一个</strong>，catch块和finally块至少要存在一个</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _002_<span class="title">try_catch_finally</span>语句进行异常处理</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入两个整数&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在用户没有输入正确的情况下，一直输入</span></span><br><span class="line">          <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    num1 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">                    num2 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">                    Console.WriteLine(num1 + num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (FormatException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;出现异常：&#123;0&#125;&quot;</span> + <span class="string">&quot;请重新输入&quot;</span>, e.Message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类里面使用private进行访问权限控制"><a href="#类里面使用private进行访问权限控制" class="headerlink" title="类里面使用private进行访问权限控制"></a>类里面使用private进行访问权限控制</h2><p>​        类里面的数据通常设置为<strong>private</strong>，这样数据只能在当前类里面使用，而无法被外界修改和访问。我们可以通过在类里面设置public的Set和Get方法来使得外界操作数据。不用Set和Get的话，外界能直接给数据赋值，无法做到赋值的限制，而使用私有属性通过Set和Get方法进行读取和输出能在方法中添加一些规则对输入和输出进行限制</p><p>​       类里面包含<strong>属性</strong>，属性包含set和get函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速设置（可以在get和set前设置只读或只写）</span></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//传统设置，可以添加条件</span></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">get</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">set</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>（age&lt;<span class="number">0</span>)</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         age = <span class="keyword">value</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在不设置变量的情况下直接使用（系统会自动生成string address）</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Address</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span>;<span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>用于初始化</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Boss</span>(<span class="params"><span class="built_in">int</span> attack,<span class="built_in">int</span> HP,<span class="built_in">int</span> speed,<span class="built_in">int</span> baseHP</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    <span class="keyword">this</span>.HP = HP;</span><br><span class="line">    <span class="keyword">base</span>.HP = HP;</span><br><span class="line">    <span class="keyword">this</span>.speed = speed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子类的构造函数"><a href="#子类的构造函数" class="headerlink" title="子类的构造函数"></a>子类的构造函数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hp;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"><span class="built_in">int</span> hp, <span class="built_in">int</span> speed</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">DrivedClass</span>:<span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> attack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrivedClass</span>(<span class="params"><span class="built_in">int</span> attack,<span class="built_in">int</span> hp,<span class="built_in">int</span> speed</span>):<span class="title">base</span>(<span class="params">hp,speed</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>​        当所有子类的攻击方法各不相同，如果父类里有攻击的方法，那么所有子类都要重写一遍，这样十分麻烦，这时可以使用抽象类，只声明方法，但不写方法内的函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;敌人移动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Boss</span> : <span class="title">Enemy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Boss攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Boss移动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的书写"><a href="#接口的书写" class="headerlink" title="接口的书写"></a>接口的书写</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IFly</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注意不允许使用修饰符</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FlyAttack</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的应用"><a href="#接口的应用" class="headerlink" title="接口的应用"></a>接口的应用</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">BIrd</span> : <span class="title">IFly</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;小鸟在空中飞&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FlyAttack</span>()</span></span><br><span class="line">     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;小鸟在空中攻击&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Plane</span> : <span class="title">IFly</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;飞机在空中飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FlyAttack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;飞机在空中攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口在主函数里的应用"><a href="#接口在主函数里的应用" class="headerlink" title="接口在主函数里的应用"></a>接口在主函数里的应用</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Plane p= <span class="keyword">new</span> Plane();</span><br><span class="line">        p.Fly();</span><br><span class="line">        p.FlyAttack();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        IFly fly = <span class="keyword">new</span> BIrd();</span><br><span class="line">        fly.Fly();</span><br><span class="line">        fly.FlyAttack();</span><br><span class="line"></span><br><span class="line">        fly=<span class="keyword">new</span> Plane();</span><br><span class="line">        fly.FlyAttack();</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2><h3 id="设置索引器"><a href="#设置索引器" class="headerlink" title="设置索引器"></a>设置索引器</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] name = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name[index]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            name[index] = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种索引器中使用函数设置</span></span><br><span class="line"> <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">string</span>[] week=<span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">7</span>] &#123;<span class="string">&quot;Mon&quot;</span>,<span class="string">&quot;Tus&quot;</span>,<span class="string">&quot;Wed&quot;</span>,<span class="string">&quot;Tus&quot;</span>,<span class="string">&quot;Frd&quot;</span>,<span class="string">&quot;Sat&quot;</span>,<span class="string">&quot;Sun&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetDay</span>(<span class="params"><span class="built_in">string</span> target</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> week)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (item != target)</span><br><span class="line">                 count++;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count+<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">string</span> day]</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">get</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">return</span> GetDay(day);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">set</span></span><br><span class="line">         &#123;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="使用索引器"><a href="#使用索引器" class="headerlink" title="使用索引器"></a>使用索引器</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    Test t= <span class="keyword">new</span> Test();</span><br><span class="line">    Console.WriteLine(t[<span class="string">&quot;Frd&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    Class1 class1 = <span class="keyword">new</span> Class1();</span><br><span class="line">    class1[<span class="number">0</span>] = <span class="string">&quot;xcl&quot;</span>;</span><br><span class="line">    Console.WriteLine(class1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>在一个类里面重新定义符号的定义，当用这个类创建的对象进行运算时，会使用这个新的运算符定义进行运算</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span>==(Student s1,Student s2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.age==s2.age&amp;&amp;s1.id==s2.id&amp;&amp;s1.name==s2.name) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(Student s1, Student s2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> jud = s1 == s2;</span><br><span class="line">        <span class="keyword">return</span> !jud;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     Student student1 = <span class="keyword">new</span> Student(<span class="number">7</span>,<span class="string">&quot;xcl&quot;</span>,<span class="number">19</span>);</span><br><span class="line">     Student student2 = <span class="keyword">new</span> Student(<span class="number">7</span>, <span class="string">&quot;xcl&quot;</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">     Console.WriteLine(student1==student2);<span class="comment">//true</span></span><br><span class="line">     Console.WriteLine(student1!=student2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">     Console.ReadKey();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">list.Add(<span class="number">9</span>);</span><br><span class="line">list.Add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">list.Insert(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">list.Remove(<span class="number">5</span>);</span><br><span class="line">list.RemoveAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(list.IndexOf(<span class="number">50</span>));</span><br><span class="line">Console.WriteLine(list.LastIndexOf(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Class1</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T a;</span><br><span class="line">    <span class="keyword">public</span> T b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Class1</span>(<span class="params">T a,T b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.a= a;</span><br><span class="line">        <span class="keyword">this</span>.b= b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetSum</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dynamic</span> num1 = a;</span><br><span class="line">        <span class="built_in">dynamic</span> num2 = b;</span><br><span class="line">        <span class="built_in">dynamic</span> result = num1 + num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> T <span class="title">GetSum</span>&lt;<span class="title">T</span>&gt;(<span class="params">T a,T b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">dynamic</span> A = a;</span><br><span class="line">    <span class="built_in">dynamic</span> B = b;</span><br><span class="line">    <span class="built_in">dynamic</span> sum = A + B;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(GetSum&lt;<span class="built_in">int</span>&gt;(<span class="number">45</span>, <span class="number">72</span>));</span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h2><p>在类内部对ToString方法进行重写，这样在直接调用对象时可以输出定义好的返回值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> age, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">this</span>.age = age;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">string</span> result = name + <span class="string">&quot;:&quot;</span> + age;</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">19</span>,<span class="string">&quot;xcl&quot;</span>);</span><br><span class="line">    Console.WriteLine(student);<span class="comment">//返回xcl：19</span></span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h2><p>每个类型都有Equal方法比较，特别情况下可以重写Equal来进行比较</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Student student = obj <span class="keyword">as</span> Student;</span><br><span class="line">    <span class="keyword">if</span>(student.age==age&amp;&amp;student.name==name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b=<span class="number">1</span>;</span><br><span class="line">Console.WriteLine(a.Equals(b));</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;xcl&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> name2 = <span class="string">&quot;xcl&quot;</span>;</span><br><span class="line">Console.WriteLine(name.Equals(name2));</span><br><span class="line"></span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="number">18</span>,<span class="string">&quot;xl&quot;</span>);</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(<span class="number">18</span>,<span class="string">&quot;xl&quot;</span>);</span><br><span class="line">Console.WriteLine(stu1.Equals(stu));</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>创建多线程之前，你需要创建一个类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _01_多线程</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建多线程，引用已经创建好的一个类</span></span><br><span class="line">            Thread ChildThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(ChildThreadMethod));</span><br><span class="line">            ChildThread.Start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//while(true)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Console.WriteLine(&quot;聊天中...&quot;);</span></span><br><span class="line">            <span class="comment">//    Thread.Sleep(1000);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//休眠</span></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//控制子线程停止</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChildThreadMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;听歌中...&quot;</span>);</span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="绘制直线-x2F-字符串"><a href="#绘制直线-x2F-字符串" class="headerlink" title="绘制直线&#x2F;字符串"></a>绘制直线&#x2F;字符串</h2><p>窗体-&gt;属性-&gt;事件-&gt;Paint-&gt;双击-&gt;在出现的函数里面书写</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Paint</span>(<span class="params"><span class="built_in">object</span> sender, PaintEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建画布</span></span><br><span class="line">    Graphics g = <span class="keyword">this</span>.CreateGraphics();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制直线</span></span><br><span class="line">    Pen p = <span class="keyword">new</span> Pen(Color.Black);</span><br><span class="line">    g.DrawLine(p, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Point(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制字符串</span></span><br><span class="line">    Font font = <span class="keyword">new</span> Font(<span class="string">&quot;Arial&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    g.DrawString(<span class="string">&quot;xcl&quot;</span>,font,</span><br><span class="line">        <span class="keyword">new</span> SolidBrush(Color.Green),</span><br><span class="line">        <span class="keyword">new</span> Point(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity</title>
      <link href="/2023/07/16/unity/"/>
      <url>/2023/07/16/unity/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity使用笔记"><a href="#Unity使用笔记" class="headerlink" title="Unity使用笔记"></a>Unity使用笔记</h1><h2 id="Unity-3D的API"><a href="#Unity-3D的API" class="headerlink" title="Unity 3D的API"></a>Unity 3D的API</h2><ul><li><p><strong>Awake</strong></p><ul><li>条件：实例化脚本时调用</li><li>用途：用于游戏对象的初始化（注意：<strong>Awake</strong>函数的执行早于所有脚本的<strong>Start</strong>函数）</li></ul></li><li><p><strong>OnEnable</strong></p><ul><li>条件：在<strong>Awake</strong>后会调用一次</li><li>用途：组件激活后调用（组件默认都是激活状态，即脚本前打了√的）</li></ul></li><li><p><strong>Start</strong></p><ul><li>条件：在<strong>Update</strong>函数第一次运行前调用</li><li>用途：用于游戏对象的初始化</li></ul></li><li><p><strong>Update</strong></p><ul><li>条件：每<strong>帧</strong>调用一次</li><li>用途：用于更新游戏场景和状态。（注意：与物理状态有关的更新放在<strong>FixedUpdate</strong>函数中）</li></ul></li><li><p><strong>FixedUpdate</strong></p><ul><li>条件：每个<strong>固定物理时间间隔（默认0.02秒）</strong>调用一次</li><li>用于物理状态的更新</li></ul></li><li><p><strong>LateUpdate</strong></p><ul><li>条件：每<strong>帧</strong>调用一次（在<strong>UpDate</strong>函数后）</li><li>用途：用于更新游戏场景和状态（注意：与相机有关更新放在这里）</li></ul></li><li><p><strong>OnDisable</strong></p><ul><li>条件：与<strong>OnEnable</strong>相反，组件未激活时调用一次</li><li>用途：与死亡有关的</li></ul></li><li><p><strong>OnDestroy</strong></p><ul><li>条件：被销毁后调用一次（即移除脚本，注意移除脚本时<strong>OnDisable</strong>也会调用一次且在<strong>OnDestroy</strong>前）</li><li>用途：写伤害或子弹</li></ul></li></ul><h2 id="脚本的执行顺序"><a href="#脚本的执行顺序" class="headerlink" title="脚本的执行顺序"></a>脚本的执行顺序</h2><ul><li>先执行所有脚本的<strong>Awake</strong>再执行所有脚本的<strong>Start</strong></li><li>手动更改脚本执行顺序<ul><li>点开脚本中的<strong>Execution Order</strong></li><li>将脚本添加上去，通过更改数值调换脚本的优先级</li></ul></li><li>把最底层的东西先执行</li></ul><h2 id="脚本的标签"><a href="#脚本的标签" class="headerlink" title="脚本的标签"></a>脚本的标签</h2><ul><li>标签（tag）是用来给开发者标识的，图层是用来给游戏内物体标识的</li><li>标签只是个名字，起到一个分组的作用，让开发者更清楚物体是什么</li><li>图层即给物体一个属性，使我们在unity中可以更方便的对拥有共同属性的物体进行操作（例如：相机的拍摄，物体的碰撞等）</li></ul><h2 id="预设体与变体"><a href="#预设体与变体" class="headerlink" title="预设体与变体"></a>预设体与变体</h2><ul><li>在图层中制作好物体后，将其拖入项目中将变成<strong>预设体</strong></li><li>修改<strong>预设体</strong>的数值或者添加组件，图层中的物体也会改变，反之则不然</li><li>在图层中增加组件或改变数值，可以通过<strong>覆盖</strong>应用到预设体</li><li>当想要预设体中的部分个体有新增的属性而其他属性一样，可以复制一个物体将其拖入项目中设置为<strong>变体</strong></li><li>修改预设体数值，变体也会跟着改变，反之不然</li></ul><h2 id="Vector3的使用"><a href="#Vector3的使用" class="headerlink" title="Vector3的使用"></a>Vector3的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//向量，坐标，旋转，缩放</span></span><br><span class="line"><span class="comment">//初始化vector3，vector3是一个结构体，在c#中初始化时需要使用new</span></span><br><span class="line">Vector3 v = <span class="keyword">new</span> Vector3(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//当然也可以不用new，直接用one，zero，righ等初始化</span></span><br><span class="line">v = Vector3.right;</span><br><span class="line">Vector3 v2 = Vector3.forward;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算两个向量夹角</span></span><br><span class="line">Debug.Log(Vector3.Angle(v, v2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算两点之间的距离</span></span><br><span class="line">Debug.Log(Vector3.Distance(v,v2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//点乘</span></span><br><span class="line">Debug.Log(Vector3.Dot(v, v2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉乘</span></span><br><span class="line">Debug.Log(Vector3.Cross(v,v2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//插值，前两个是两个点a，b，第三个参数是两点之间你想取的比例，0就是a，1就是b</span></span><br><span class="line">Debug.Log(Vector3.Lerp(Vector3.one,Vector3.zero,<span class="number">0.7f</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//向量的模</span></span><br><span class="line">Debug.Log(v.magnitude);</span><br><span class="line"></span><br><span class="line"><span class="comment">//单位化向量</span></span><br><span class="line">Debug.Log(v.normalized);</span><br></pre></td></tr></table></figure><h2 id="旋转（同样使用Vector3）"><a href="#旋转（同样使用Vector3）" class="headerlink" title="旋转（同样使用Vector3）"></a>旋转（同样使用Vector3）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//旋转：欧拉角</span></span><br><span class="line">Vector3 rotate = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//旋转：四元数</span></span><br><span class="line"><span class="comment">//无旋转</span></span><br><span class="line">Quaternion quaternion = Quaternion.identity;</span><br><span class="line"></span><br><span class="line"><span class="comment">//欧拉角转四元数</span></span><br><span class="line">quaternion = Quaternion.Euler(rotate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//四元数转欧拉角</span></span><br><span class="line">rotate = quaternion.eulerAngles;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看向一个物体</span></span><br><span class="line">quaternion = Quaternion.LookRotation(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    Debug.LogWarning(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    Debug.LogError(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//绘制一条线</span></span><br><span class="line">    Debug.DrawLine(Vector3.zero,Vector3.one,Color.blue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制一条射线 起点，射线</span></span><br><span class="line">    Debug.DrawRay(Vector3.zero,Vector3.up,Color.red);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//另一种表示方法</span></span><br><span class="line">    <span class="comment">//起点，终点</span></span><br><span class="line">    Debug.DrawLine(<span class="keyword">new</span> Vector3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="keyword">new</span> Vector3(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//起点，相对于起点的方向</span></span><br><span class="line">    Debug.DrawRay(<span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物体属性"><a href="#物体属性" class="headerlink" title="物体属性"></a>物体属性</h2><p>前导：</p><ul><li><code>GameObject</code> 是 Unity 中的一个类，它表示场景中的一个游戏对象。<code>GameObject</code> 类提供了许多方法和属性，用于创建、操作和管理游戏对象。</li><li><code>gameObject</code> 则是 <code>Component</code> 类的一个属性，用于获取该组件所属的游戏对象。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmptyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//脚本所挂载的本来就是一个物体a，这步相当于多声明了一个物体b，</span></span><br><span class="line">    <span class="comment">//在unity中我们可以新建一个物体，并把它赋值给b，之后我们可以在a中操作b</span></span><br><span class="line">    <span class="keyword">public</span>  GameObject cc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得预设体</span></span><br><span class="line">    <span class="keyword">public</span> GameObject Prefab;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//拿到当前脚本所挂载的物体</span></span><br><span class="line">        GameObject x = <span class="keyword">this</span>.gameObject;</span><br><span class="line">        <span class="comment">//后面没必要这么写了,直接用gameObject表示就行</span></span><br><span class="line">        Debug.Log(x.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//名称</span></span><br><span class="line">        Debug.Log(gameObject.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//tag</span></span><br><span class="line">        Debug.Log(gameObject.tag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//layer</span></span><br><span class="line">        Debug.Log(gameObject.layer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关联物体b的名称</span></span><br><span class="line">        Debug.Log(cc.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关联物体b真正的激活状态(即自身激活，但父物体没激活导致自己没有激活）</span></span><br><span class="line">        Debug.Log(cc.activeInHierarchy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关联物体b自身激活状态</span></span><br><span class="line">        Debug.Log(cc.activeSelf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Transform组件(x，y，z是三位小数）</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其他组件,组件是什么类型，前面的类就是什么</span></span><br><span class="line">        BoxCollider collider = GetComponent&lt;BoxCollider&gt;();</span><br><span class="line">        Debug.Log(collider);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取子物体的某个组件</span></span><br><span class="line">        <span class="comment">//可以先获取指定物体的transform组件，通过这个方法获取指定物体的其他组件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">        Transform child=transform.GetChild(<span class="number">0</span>);<span class="comment">//0代表获取第一个子物体</span></span><br><span class="line">        Rigidbody rb = child.GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        Debug.Log(rb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        Transform child2 = transform.Find(<span class="string">&quot;GameObject&quot;</span>);</span><br><span class="line">        Rigidbody rb2 = child2.GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        Debug.Log(rb2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取子物体的子物体的组件</span></span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">        Transform grandchild=transform.GetChild(<span class="number">0</span>).GetChild(<span class="number">0</span>);</span><br><span class="line">        MeshRenderer bc=grandchild.GetComponent&lt;MeshRenderer&gt;();</span><br><span class="line">        Debug.Log(bc.material);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方法(先获取子物体的transform，再获取子物体的子物体的transform）</span></span><br><span class="line">        Transform grandchild2 = child.Find(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        MeshRenderer bc2 = grandchild2.GetComponent&lt;MeshRenderer&gt;();</span><br><span class="line">        Debug.Log(bc2.material);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父物体的组件</span></span><br><span class="line">        Transform parent = transform.parent;</span><br><span class="line">        MeshRenderer bc3= parent.GetComponent&lt;MeshRenderer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个组件</span></span><br><span class="line">        gameObject.AddComponent&lt;AudioSource&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给关联物体b添加组件</span></span><br><span class="line">        cc.AddComponent&lt;AudioSource&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其他物体</span></span><br><span class="line">        <span class="comment">//通过名称获取</span></span><br><span class="line">        GameObject test = GameObject.Find(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过标签获取(只返回最后创建的一个，多标签没法用）</span></span><br><span class="line">        test = GameObject.FindWithTag(<span class="string">&quot;Enemy&quot;</span>);</span><br><span class="line">        Debug.Log(test.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过预设体来实例化一个游戏物体</span></span><br><span class="line">        Vector3 rotate = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        GameObject go = Instantiate(Prefab,Vector3.zero,Quaternion.Euler(rotate));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//销毁</span></span><br><span class="line">        Destroy(go);    </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">float</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏开始到现在所花的时间</span></span><br><span class="line">        Debug.Log(UnityEngine.Time.time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//时间缩放值（加速，减速）</span></span><br><span class="line">        Debug.Log(UnityEngine.Time.timeScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定时间间隔</span></span><br><span class="line">        Debug.Log(UnityEngine.Time.fixedDeltaTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//上一帧到这一帧所用时间</span></span><br><span class="line">        timer += UnityEngine.Time.deltaTime;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (timer &lt;= <span class="number">3</span>)</span><br><span class="line">            Debug.Log(UnityEngine.Time.deltaTime);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Debug.Log(<span class="string">&quot;大于三秒了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件路径权限"><a href="#文件路径权限" class="headerlink" title="文件路径权限"></a>文件路径权限</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">## 场景切换</span></span><br><span class="line"></span><br><span class="line">* 项目--&gt;Scenes文件夹--&gt;新建一个场景--&gt;左上方文件--&gt;生成设置--&gt;将Scenes中的场景拖入build中(记住场景编号，后续有用)</span><br><span class="line"></span><br><span class="line">* 创建一个空对象和脚本</span><br><span class="line">* 导入一个新的名称空间**<span class="keyword">using</span> UnityEngine.SceneManagement**</span><br><span class="line"></span><br><span class="line">```c<span class="meta">#</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//进入设置中的1号场景</span></span><br><span class="line">        SceneManager.LoadScene(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//或者通过场景名称的方式</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>);</span><br><span class="line">        <span class="comment">//后面可以加指令</span></span><br><span class="line">        <span class="comment">//跳转到指定场景</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>,LoadSceneMode.Single);</span><br><span class="line">        <span class="comment">//让指定场景与当前场景叠加</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前场景</span></span><br><span class="line">        Scene scene = SceneManager.GetActiveScene();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//名称</span></span><br><span class="line">        Debug.Log(scene.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景是否已经加载</span></span><br><span class="line">        Debug.Log(scene.isLoaded);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景路径</span></span><br><span class="line">        Debug.Log(scene.path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景索引</span></span><br><span class="line">        Debug.Log(scene.buildIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取场景中的所有物体</span></span><br><span class="line">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class="line">        Debug.Log(gos.Length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景管理类</span></span><br><span class="line">        <span class="comment">//创建一个叫“NewScene”的新场景</span></span><br><span class="line">        Scene newscene = SceneManager.CreateScene(<span class="string">&quot;NewScene&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已加载场景个数</span></span><br><span class="line">        Debug.Log(SceneManager.sceneCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//卸载场景</span></span><br><span class="line">        SceneManager.UnloadSceneAsync(newscene);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update is called once per frame</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步加载场景并显示进度"><a href="#异步加载场景并显示进度" class="headerlink" title="异步加载场景并显示进度"></a>异步加载场景并显示进度</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    AsyncOperation operation;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新建一个线程，线程内容是loadScene里的内容</span></span><br><span class="line">        StartCoroutine(loadScene());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//远程方法用来异步加载场景</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">loadScene</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        operation=SceneManager.LoadSceneAsync(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//加载完场景不要自动跳转</span></span><br><span class="line">        operation.allowSceneActivation = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">float</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//异步加载进度</span></span><br><span class="line">        Debug.Log(operation.progress);</span><br><span class="line">        timer += UnityEngine.Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span>(timer&gt;<span class="number">5</span>)</span><br><span class="line">            operation.allowSceneActivation=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="transfom入门"><a href="#transfom入门" class="headerlink" title="transfom入门"></a>transfom入门</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransformTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取位置</span></span><br><span class="line">        <span class="comment">//世界位置</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line">        <span class="comment">//相对父物体的位置（面板位置）</span></span><br><span class="line">        Debug.Log(transform.localPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取旋转</span></span><br><span class="line">        Debug.Log(transform.rotation);</span><br><span class="line">        Debug.Log(transform.localRotation);</span><br><span class="line">        Debug.Log(transform.eulerAngles);</span><br><span class="line">        Debug.Log(transform.localEulerAngles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取缩放</span></span><br><span class="line">        Debug.Log(transform.localScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量</span></span><br><span class="line">        Debug.Log(transform.forward);<span class="comment">//z</span></span><br><span class="line">        Debug.Log(transform.right);<span class="comment">//x</span></span><br><span class="line">        Debug.Log(transform.up);<span class="comment">//y</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父子关系</span></span><br><span class="line">        <span class="comment">//子物体个数</span></span><br><span class="line">        Debug.Log(transform.childCount);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解除与子物体的父子关系</span></span><br><span class="line">        transform.DetachChildren();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一个物体是不是另一个物体的子物体</span></span><br><span class="line">        Transform child = transform.Find(<span class="string">&quot;Child&quot;</span>);</span><br><span class="line">        <span class="built_in">bool</span> jud = child.IsChildOf(transform);</span><br><span class="line">        Debug.Log(jud);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为父物体</span></span><br><span class="line">        child.SetParent(transform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时时刻刻看向某个点</span></span><br><span class="line">        transform.LookAt(Vector3.zero);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自转(绕y轴每帧旋转一度）</span></span><br><span class="line">        transform.Rotate(Vector3.up,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绕某个物体旋转(特定点，轴，旋转角度）</span></span><br><span class="line">        transform.RotateAround(Vector3.zero,Vector3.up,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动(指定方向是局部方向）</span></span><br><span class="line">        transform.Translate(Vector3.forward*<span class="number">0.1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="键鼠操作"><a href="#键鼠操作" class="headerlink" title="键鼠操作"></a>键鼠操作</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//鼠标的点击</span></span><br><span class="line">    <span class="comment">//监测瞬间的鼠标操作 0左键 1右键 2滚轮</span></span><br><span class="line">    <span class="comment">//按下鼠标</span></span><br><span class="line">    <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;按下了左键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持续按下鼠标按键</span></span><br><span class="line">    <span class="keyword">if</span>(Input.GetMouseButton(<span class="number">0</span>)) &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;持续按下左键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抬起鼠标</span></span><br><span class="line">    <span class="keyword">if</span> (Input.GetMouseButtonUp(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;抬起了鼠标左键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下键盘按键</span></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;按下了A键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持续按下按键</span></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKey(KeyCode.A))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;持续按下A键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抬起键盘按键</span></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;抬起了A键&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="虚拟轴和虚拟按键"><a href="#虚拟轴和虚拟按键" class="headerlink" title="虚拟轴和虚拟按键"></a>虚拟轴和虚拟按键</h2><ul><li>编辑–&gt;项目设置–&gt;输入管理器–&gt;轴线</li><li>只有水平和垂直是虚拟轴，其他都是虚拟按键</li><li>在里面可以查询名称，后续会使用</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取垂直，水平虚拟轴</span></span><br><span class="line">    <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);<span class="comment">//“ ”里的是名称，注意不要打错单词</span></span><br><span class="line">    <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    Debug.Log(horizontal + <span class="string">&quot;    &quot;</span> + vertical);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//虚拟按键</span></span><br><span class="line">    <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">&quot;Jump&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Jump&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他与上章相同GetButton和GetButtonUp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>easyx</title>
      <link href="/2023/05/17/easyx/"/>
      <url>/2023/05/17/easyx/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言使用easyx图形化编程"><a href="#C语言使用easyx图形化编程" class="headerlink" title="C语言使用easyx图形化编程"></a>C语言使用easyx图形化编程</h1><ul><li>首先，使用easyx进行操作必须是<strong>cpp</strong>文件，<strong>切记</strong>。</li><li>头文件–<strong>&lt;graphics.j&gt;</strong></li></ul><h2 id="创建-x2F-关闭一个窗口"><a href="#创建-x2F-关闭一个窗口" class="headerlink" title="创建&#x2F;关闭一个窗口"></a>创建&#x2F;关闭一个窗口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="number">640</span>,<span class="number">480</span>，flag);<span class="comment">//创建一个640*480的窗口</span></span><br><span class="line">getchar（）<span class="comment">//在关闭窗口加上，防止闪退</span></span><br><span class="line">closegraph();<span class="comment">//关闭窗口</span></span><br></pre></td></tr></table></figure><p>flag有以下几种功能：</p><ul><li><p>SHOWCONSOLE 显示控制台窗口</p></li><li><p>NOCLOSE 不支持图形化界面关闭</p></li><li><p>NOMINIMIZE 不支持最小化</p></li><li><p>EW_DBLCLKS 支持双击操作</p><h3 id="当想要实现多个功能时如下操作："><a href="#当想要实现多个功能时如下操作：" class="headerlink" title="当想要实现多个功能时如下操作："></a>当想要实现多个功能时如下操作：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="number">640</span>, <span class="number">480</span>, EW_DBLCLKS | SHOWCONSOLE | NOCLOSE | NOMINIMIZE);</span><br></pre></td></tr></table></figure></li></ul><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="图形样式"><a href="#图形样式" class="headerlink" title="图形样式"></a>图形样式</h3><p>填充样式有三类（以画圆为例）：</p><ul><li>circle（）&#x2F;&#x2F;无填充</li><li>fillcircle（）&#x2F;&#x2F;有边框填充</li><li>solidcircle（）&#x2F;&#x2F;无边框填充</li></ul><p>以形状区分，常见的有八种：</p><ul><li><p>circle 画圆  </p></li><li><p>ellipse 画椭圆</p></li><li><p>pie 画扇形</p></li><li><p>polygon 画多边形</p></li><li><p>rectangle 画矩形</p></li><li><p>roundrect 画圆角矩形</p></li><li><p>line 画线</p></li><li><p>putpixle 画点</p></li></ul><h3 id="设置图形颜色"><a href="#设置图形颜色" class="headerlink" title="设置图形颜色"></a>设置图形颜色</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setfillcolor(颜色);<span class="comment">//设置填充颜色</span></span><br><span class="line">setlinecolor(颜色);<span class="comment">//设置线条颜色</span></span><br><span class="line">setlinestyle(线样式，线宽度);<span class="comment">//设置线条样式</span></span><br></pre></td></tr></table></figure><p>线样式有如下几种：</p><ul><li>PS_SOLID &#x2F;&#x2F;实线</li><li>PS_DASH&#x2F;&#x2F;虚线</li><li>PS_DOT&#x2F;&#x2F;······</li><li>PS_DASHDOT&#x2F;&#x2F;—·—·</li><li>PS_DASHDOTDOT&#x2F;&#x2F;—··—··</li></ul><h3 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setckcolor(颜色)<span class="comment">//设置背景板颜色</span></span><br><span class="line">cleardevice();<span class="comment">//清屏</span></span><br><span class="line"><span class="comment">//一定是两步，第一步相当于把背景颜色垫到当前背景颜色下，第二步擦掉最上层颜色，即剩下的就是设置的背景颜色（默认背景板是黑色）</span></span><br></pre></td></tr></table></figure><h2 id="文字绘制函数"><a href="#文字绘制函数" class="headerlink" title="文字绘制函数"></a>文字绘制函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">settextcolor(颜色)；</span><br><span class="line">outtextxy(<span class="number">50</span>,<span class="number">50</span>,<span class="string">&#x27;a&#x27;</span>);<span class="comment">//在（x,y）输出a</span></span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">50</span>, <span class="string">&quot;lucky!!!&quot;</span>);<span class="comment">//注意单双引号</span></span><br><span class="line">settextstyle(<span class="number">20</span>,<span class="number">0</span>,<span class="string">&quot;楷体&quot;</span>);<span class="comment">//指定高度，字符的平均宽度，如果是0则比例自适应，字体名称</span></span><br><span class="line">setbkmode(TRANSPARENT);<span class="comment">//设置背景样式,透明</span></span><br><span class="line">settextcolor(RGB(<span class="number">255</span>, <span class="number">102</span>, <span class="number">153</span>));<span class="comment">//获取色号方法：ctrl+alt+k截图，c保存色号，ctrl+v</span></span><br></pre></td></tr></table></figure><h3 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fillrectangle(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="type">int</span> width=<span class="number">100</span>/<span class="number">2</span>-textwidth(arr)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> hight = <span class="number">100</span> / <span class="number">2</span> - textheight(arr) / <span class="number">2</span>;</span><br><span class="line">outtextxy(width + <span class="number">200</span>, hight + <span class="number">200</span>, arr);</span><br></pre></td></tr></table></figure><p>​        一个简单的算法，用文字框的一半减去字符串的一半即可得到他们之间的距离，用文字框开始的坐标加上这个距离就可使文字居中</p><h2 id="图像处理函数"><a href="#图像处理函数" class="headerlink" title="图像处理函数"></a>图像处理函数</h2><p>​       使用图像前，需要定义一个变量，使用easyx库提供给我们的类型：IMAGE 如：IMAGE img；当然也可以使用数组，存储多张图片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMAGE img[<span class="number">1</span>];</span><br><span class="line">loadimage(&amp;img[<span class="number">0</span>],<span class="string">&quot;3.png&quot;</span>,<span class="number">640</span>,<span class="number">480</span>);<span class="comment">//从文件中读取图像</span></span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;img[<span class="number">0</span>]);<span class="comment">//在（x，y）位置绘制指定图像</span></span><br></pre></td></tr></table></figure><h2 id="鼠标处理函数"><a href="#鼠标处理函数" class="headerlink" title="鼠标处理函数"></a>鼠标处理函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Click</span><span class="params">()</span> &#123;</span><br><span class="line">ExMessage msg;<span class="comment">//跟图像处理一样，先定义一个变量，mag是一个结构体，里面储存了多种信息</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (peekmessage(&amp;msg, EX_MOUSE)) &#123;<span class="comment">//检测是否有鼠标点击</span></span><br><span class="line"><span class="keyword">switch</span> (msg.message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:<span class="comment">//左键点击</span></span><br><span class="line"><span class="keyword">if</span> (msg.x &gt;= <span class="number">100</span> &amp;&amp; msg.x &lt;= <span class="number">300</span> &amp;&amp; msg.y &gt;= <span class="number">100</span> &amp;&amp; msg.y &lt;= <span class="number">300</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:<span class="comment">//右键点击</span></span><br><span class="line"><span class="keyword">if</span> (msg.x &gt;= <span class="number">100</span> &amp;&amp; msg.x &lt;= <span class="number">300</span> &amp;&amp; msg.y &gt;= <span class="number">100</span> &amp;&amp; msg.y &lt;= <span class="number">300</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yeah&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="窗口处理函数"><a href="#窗口处理函数" class="headerlink" title="窗口处理函数"></a>窗口处理函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Change</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line">SetWindowText(hnd, <span class="string">&quot;蕾姆天下第一&quot;</span>);<span class="comment">//修改窗口标题</span></span><br><span class="line"><span class="type">int</span> isok=MessageBox(hnd, <span class="string">&quot;恭喜你，成功中奖500W&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);<span class="comment">//弹出对话框，hnd是强制置顶的功能，换成NULL则取消这个功能</span></span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)<span class="comment">//判断玩家点击对话框</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;天下没有免费的午餐！&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;500W都不要，脑子没事吧？&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表相加</title>
      <link href="/2023/05/14/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/"/>
      <url>/2023/05/14/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="链表相加"><a href="#链表相加" class="headerlink" title="链表相加"></a>链表相加</h1><blockquote><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], l2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>]</span><br><span class="line">解释：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>关键在于t的运用，t能用于进位和结束的判断，神来之笔！</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummy</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">cur</span> =</span> dummy;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1 || l2 || t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1) t += l1-&gt;val,l1=l1-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(l2) t += l2-&gt;val,l2=l2-&gt;next;</span><br><span class="line">        cur-&gt;next = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        cur-&gt;next-&gt;val = t%<span class="number">10</span>;</span><br><span class="line">        cur-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希排序</title>
      <link href="/2023/05/14/%E5%93%88%E5%B8%8C%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/05/14/%E5%93%88%E5%B8%8C%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希排序"><a href="#哈希排序" class="headerlink" title="哈希排序"></a>哈希排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到数组中的最大值</span></span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建哈希表并初始化为0</span></span><br><span class="line">    <span class="type">int</span>* hashTable = (<span class="type">int</span>*)<span class="built_in">calloc</span>(max + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个元素的出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        hashTable[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据哈希表进行排序</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; hashTable[i]; j++) &#123;</span><br><span class="line">            arr[index++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放哈希表的内存</span></span><br><span class="line">    <span class="built_in">free</span>(hashTable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    countingSort(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sorted array: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>求最小公倍数/最大公因数</title>
      <link href="/2023/01/04/%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/"/>
      <url>/2023/01/04/%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="求最小公倍数-x2F-最大公因数"><a href="#求最小公倍数-x2F-最大公因数" class="headerlink" title="求最小公倍数&#x2F;最大公因数"></a>求最小公倍数&#x2F;最大公因数</h1><h2 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h2><p>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：</p><p>1997 &#x2F; 615 &#x3D; 3 (余 152)</p><p>615 &#x2F; 152 &#x3D; 4(余7)</p><p>152 &#x2F; 7 &#x3D; 21(余5)</p><p>7 &#x2F; 5 &#x3D; 1 (余2)</p><p>5 &#x2F; 2 &#x3D; 2 (余1)</p><p>2 &#x2F; 1 &#x3D; 2 (余0)</p><p>至此，最大公约数为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1,num2,tem;<span class="comment">//num1，num2是输入的两个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line">    <span class="keyword">while</span>(num2)&#123;</span><br><span class="line">        tem=num1;</span><br><span class="line">        num1=num2;</span><br><span class="line">        num2=tem%num2;</span><br><span class="line">    &#125;<span class="comment">//当num2=0时，num1就是最大公约数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>最小公倍数就是两数相乘再除以最小公倍数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findmax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1,num2,max,min;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line">    max=findmax(num1,num2);<span class="comment">//最大公约数</span></span><br><span class="line">    min=num1*num2/max;<span class="comment">//最小公倍数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,min)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findmax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tem;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        tem=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=tem%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="comment">//找最大公约数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>换进制的一些算法</title>
      <link href="/2022/11/23/c%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/11/23/c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">convert</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (n%<span class="number">10</span>)+convert(n/<span class="number">10</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">numConvert</span><span class="params">(<span class="type">int</span> number, <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N=n,ten=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(number!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        ten=ten+(number%<span class="number">10</span>)*(N/n);</span><br><span class="line">        N=n*N;</span><br><span class="line">        number=number/<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> three=<span class="number">0</span>,x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ten!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        three=three+(ten%m)*x;</span><br><span class="line">        x*=<span class="number">10</span>;</span><br><span class="line">        ten=ten/m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> three;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十年一舞，终有回响</title>
      <link href="/2022/11/20/postDeft/"/>
      <url>/2022/11/20/postDeft/</url>
      
        <content type="html"><![CDATA[<h1 id="十年一舞，终有回响"><a href="#十年一舞，终有回响" class="headerlink" title="十年一舞，终有回响"></a>十年一舞，终有回响</h1><h5 id="12班2022211344谢承龙"><a href="#12班2022211344谢承龙" class="headerlink" title="12班2022211344谢承龙"></a>12班2022211344谢承龙</h5><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694528286.jpg" alt="deft"></p><blockquote><p>我个人是从2016年开始接触lol的，当时从客户端页面里第一次看到了lol的职业比赛就被深深吸引住了，后来随着比赛越看越多我也越来越了解每个选手，喜欢上了Clearlove这名选手，也喜欢上了他所在的战队，当时在国内难逢敌手的edg战队，也是从那时第一次认识到了当时edg的顶级“大腿”——deft。后来edg浮浮沉沉，成绩起伏不定，当时edg的选手很多都退役了，deft也离开了edg在这7年时间内辗转数队，因为年龄的增加，状态也不可避免的下滑。今年是他地六次进入s赛，以不被所有人看好的韩国四号种子的身份。他却在自己职业生涯的第十年，打破所有外界的质疑，从入围赛一步步打到决赛，诠释了何为极致的纯粹，以及数十年如一日的对一个目标的不懈追寻所迸发的绚丽火花，在职业生涯的末端为全世界献上了他的名为奇迹的last dance，是我心中很是悸动，久违的感受到了属于电子竞技的魅力，无关国籍，无关立场，单纯地想为这位伟大的选手写一篇博客。 </p></blockquote><p>​    金赫奎（游戏ID：Deft），1996年10月23日出生于韩国<a href="https://baike.baidu.com/item/%E9%A6%96%E5%B0%94/61723?fromModule=lemma_inlink">首尔</a>，韩国<a href="https://baike.baidu.com/item/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/4615671?fromModule=lemma_inlink">英雄联盟</a>职业选手，司职<a href="https://baike.baidu.com/item/ADC/3081935?fromModule=lemma_inlink">ADC</a>，曾效力于SSB战队、<a href="https://baike.baidu.com/item/EDG/15092333?fromModule=lemma_inlink">EDG</a>战队、<a href="https://baike.baidu.com/item/KT/18716422?fromModule=lemma_inlink">KT</a>战队、KZ战队、HLE战队，现效力于<a href="https://baike.baidu.com/item/DRX/50250966?fromModule=lemma_inlink">DRX</a>战队。</p><p>​    <strong>deft</strong>2013年初次登上职业赛场的舞台，效力于<strong>MVP</strong>战队（后被三星收购），三星当时拥有两支战队，两只都是世界顶尖的水平，故这十人也被人们冠以<strong>三星十子</strong>的美称，而deft就是这十人中年级第二小的弟弟。那年deft效力的<strong>三星蓝</strong>在各种赛事上都赢过了<strong>三星白</strong>却在全球总决赛的4强赛中以0：3负于三星白。虽然结局令人惋惜，但deft年纪还小未来可期，<strong>这本应该是deft这位顶级ad谱写传奇的第一步，却不曾想这却成为deft在未来近十年内在世界赛内取得的最好的成绩</strong></p><p>​    在2014年deft远渡重洋来到中国的edg并助力edg成为当时中国独一档的顶尖强队，拿下了包括德玛西亚杯，2015lpl春季赛冠军，并在那年的拳头第一次举办的msi——这一世界上含金量仅次于s赛的世界大赛中战胜了当时被奉为神话的SKT战队，成为了第一届msi冠军，也为中国拿到了第一个国际赛事的冠军，<strong>但令人惋惜的是在deft巅峰期，这届msi成为了他在国际联赛中的唯一高光</strong></p><p>​    在2015年及2016年deft都作为edg的王牌承载着几乎全中国观众的希望登上s赛的舞台但最终都饮恨倒在了8强，而他也最终做出了离开edg的决定，在2016年的年度颁奖典礼上deft也成为了那一年的年度mvp，在中国观众的一声声deft的呐喊与欢呼中，<strong>他留下了离别的泪水，是感激也是不舍，是对中国观众支持的感动，也代表着他的成长，从曾经三星十子中爱哭的弟弟到坚强的逐梦人的成长。</strong></p><p>​    但命运似乎永远都在与deft的开玩笑，处于巅峰末期的deft加入了韩国的“银河战舰”kt，却没能进入2017的世界赛，在2018年deft继续保持在最高水平的竞技水平，帮助kt取得韩国夏季赛冠军，成为了当时最被看好的s赛冠军的有力竞争者。但造化弄人，他们在8强赛中遇上了当年的世界冠军ig，再次倒在了八强，<strong>在deft职业生涯巅峰的末端他仍然没有突破8强这一瓶颈，命运似乎永远都没有站在他这一边。</strong></p><p>   于是在2019年他再次转会kz，在这一年他甚至没能进入季后赛。19年是个对于deft特别却又残忍的一年，在这一年中他取得了他人生中最差的成绩，而曾经的三星十子除他以外全部退役，他的竞技状态也随着年纪的增长开始走向低谷，<strong>他已从队伍中最小的弟弟不知不觉的成为了队内的老大哥，成为了三星十子中最后的明星。</strong></p><p>   在2020，2021年中deft分别效力于drx，hle战队，但无论他如何辗转，队友如何变幻，不变的却是8强这一看似他永远都无法突破的心魔。在他职业生涯的第九年，以五次s赛8强的成绩，他也被人们戏称为“五八同城”。而在2022年deft回到了老东家drx，而这一年他的队友是blg的弃子kingen与zeka，dk的弃子beryl，和才取得联赛倒数成绩的pyosik，所有人都不看好这一支队伍，也一致认为这将是deft生涯的最后一年，随着新生代选手的脱颖而出，人们逐渐开始不在关注这位老将，更不会对他抱有太大期望，<strong>但永远不要低估一位坚守赛场数十年如一日的老将取胜的决心，与一位最纯粹的追梦人历尽坎坷后所拥有的坚定信念</strong></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/007GrnJqgy1h7g9ov4k3sj30u02gkh1q.jpg"></p><p>drx在国内正如赛前无数人所预期的一样，成绩平平，甚至以3:2的成绩艰难击败slb后才堪堪以四号种子的身份进入世界赛。但命运似乎在deft辗转10年后依然没有对他露出笑容，这支drx从入围赛开始就恶战不断，从msi冠军rng到夺冠热门tes，再到8强赛的2021年世界冠军edg，再到lck春季赛冠军，两届世界冠军geng，每场比赛都没人看好drx，但drx却把把“爆冷”在与一众强敌的对决中不断进化，<strong>在击败edg后，这也是deft历经2942天重新突破八强，这一次deft的眼泪名为坚持与热爱。</strong></p><p><strong>”究竟什么样的结局才配得上这一路上的颠沛流离“</strong>在解说为这位老将真心呐喊的声音中，deft终于第一次来到了他人生中梦寐以求的s赛的决赛舞台，而迎战他们的是在这届s赛中以碾压之姿进入决赛，英雄联盟历史上最传奇的战队——SKT。而即使他千辛万苦用尽十年时光才到达这个舞台，命运女神似乎仍然在与他开玩笑，渴望将他拉入深渊。在比赛中drx三次被抢大龙，有两次甚至是被ad抢的，一次次丢失大龙不断挑战着选手们的心态，就连我当时也觉得运气似乎真的不站在drx这边，deft真要止步于此了。<strong>但正如s12主题曲《逐星》所唱到的那样“生命若不息，前行永不停，逐星至天明。”</strong>在重压下deft甘愿做为队伍的绿叶默默抗压，把舞台给到了自己的后辈们，而他们也没有辜负deft这一老大哥的信任，在队伍一次次陷入绝境时交替挺身而出。随着最后一条远古龙被打野稳稳拿下，<strong>deft终于拿到了他追逐十年梦寐以求的全球冠军，创造了s赛近12年以来最触动人心的奇迹</strong>，<strong>那一刻DRX给我带来的感动是超越了“输赢”“胜负”，来到另一个层面。他们夺冠的过程，展现了电子竞技与其他体育项目共同蕴含着的竞技精神，是在逆境中不屈不挠，绝望时拼搏出一线生机，最终实现超越自我，散发着闪耀光芒的人性光辉。这就是竞技体育的魅力，这就是奥林匹克精神。谢谢deft圆满的结局没有让纯粹的理想主义成为悲歌，他的名字必将被所有召唤师铭记。</strong></p><blockquote><p>夺冠后Deft的新ins：</p></blockquote><blockquote><p>过了一段时间了，我终于感受到这一切不是梦。我每一天都看着很多人说：“你拿不到冠军” ，“伤病以后就结束了”，“年纪大了就结束了..”我好像花了10年的时间，才有资格去说你们这些话是错的。希望我和我们队的胜利能成为那些正在经历比我更艰难日子的人们希望，最重要的是不屈服的心…今年真的很有趣，大家给予了我很多支持，这一年是我人生中最幸福的一年，一直以来很感谢大家.</p></blockquote><p><strong>就像deft所说的那样“My dance is not over yet。”</strong>deft的最后一舞已经完美落幕了，但这样一位如此纯粹历经无数坎坷仍初心如故的追梦人向我向，全世界展示了坚持所创造的奇迹，特别在如今的时代里deft的夺冠更是有着无可估量的正面作用。<strong>在摆烂之风畅行的现在，越来越多的人开始学会接受现实，接受不是所有努力都有回报，但当deft这样的老将，drx这样没有太多话题的战队用以比热血漫画还艰难的过程和更圆满的结局告诉世人纯粹才是电竞的未来时，我们或许会想起当年爱上lol的原因，回想起当年挑战命运的自己。</strong>也许很多年后的某一天当我们再一次谈论起deft时，除了赞叹他的十年逐梦，终有回响外，更会钦佩他连续十年倒下，又连续十年站起来的勇气与执着，哪怕是遍体鳞伤，哪怕是不被全世界看好，连命运都无法将他击倒的人，真的很酷。<strong>如果有一天你觉得命运不公，希望你能回来再听听deft与drx的故事，不是所有人都是天选，但你永远是唯一。</strong></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694542656.png" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694545485.jpg" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694548357.jpg" alt="deft"></p><p><img src="https://raw.githubusercontent.com/Clear1oveE/Clear1oveE.github.io/main/2022/11/20/postDeft/1668694551086.jpg" alt="deft"></p>]]></content>
      
      
      <categories>
          
          <category> league of legends </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
